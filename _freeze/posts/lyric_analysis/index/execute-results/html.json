{
  "hash": "c461ff2188bd901c86cce28a2ca6e976",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example Analysis: Who is the saddest shoegaze band?\"\nauthor: \"Yunyi Ru\"\ndate: \"2024-11-08\"\ncategories: [fun, data analysis]\nbibliography: \n - my-refs.bib\n - my-refs2.bib\n---\n\n\n\n::: column-screen\n![Shoegaze is an effect-heavy subgenre of indie rock.](pedalboard.jpg)\n:::\n\n# Introduction\n\n## Why This Project\n\nI'm interested in the 'shoegaze' subgenre of indie rock. This less-known genre, also called 'the scene that celebrates itself', rose from the noise pop scene in the late 80s and early 90s, and has regained popularity recently. An article titled *'The Shoegaze Revival Hit Its Stride in 2023'* [@sherburne_shoegaze_2023] by pitchfork also captures the revival of shoegaze among GenZ populations.\n\n::: column-margin\n![My bloody valentine's 1988 EP 'You made me realise' is a classic shoegaze record.](Youmademerealise.png)\n:::\n\nShoegaze is characterized by heavy use of overdriven guitar and various effect pedals with the combination of the ethereal vocals; the lyrics are often regarded as blank, poetic, and sometimes difficult to distinguish from the instruments. So here comes this project for the indieheads - I want to analyze those usually overlooked lyrics, especially from the perspective of sentiment.\n\nThe bands I want to study are the so-called classic 'big-three' of shoegaze: *my bloody valentine*, *Ride*, and *slowdive*. They were all on the independent record label *Creation* from London, UK, reached their peak in early 90s, disbanded in late 90s due to the fading of the subgenre, and reunited in the 21st century, which make them a perfect fit to study the changes in the lyrics over the years.\n\n## My Questions\n\n1.  What words frequently appear in their lyrics?\n2.  Which bands have the longest and shortest lyrics?\n3.  Who is the saddest shoegaze band?\n4.  Are bands trending towards happiness or sadness over time?\n\n# Project\n\n## Data Acquisition & Wragling\n\n::: column-margin\n![](loveless.png) ![](nowhere.jpg) ![](souvlaki.jpeg)\n:::\n\n### Data Acquisition\n\nLyrics from all studio albums of the 'big three' bands in the shoegaze genre - *my bloody valentine (mbv)*, *Ride*, and *slowdive* - are retrieved from [Genius.com](https://genius.com/) using a Python package named [lyricsgenius](https://www.johnwmillr.com/scraping-genius-lyrics/)[@miller_johnwmillrlyricsgenius_2024] based on Genius API. Please see the author's instructions for details.\n\n::: callout-note\nThe downloaded `.json` files were written into a `.csv` file for further processing. Please go to the [source repository](https://github.com/yunyi-ru/quarto-blog) for more details.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary('stringi')\nlibrary('tidyverse')\nlibrary('lubridate')\nlibrary('knitr')\n\n# reference\nknitr::write_bib(\"rmarkdown\", file = \"my-refs.bib\")\n\n# import data\nlyrics <- read.csv(\"lyrics_data.csv\")\nkable(head(lyrics, n = 1))\n```\n\n::: {.cell-output-display}\n\n\n| Track.Number|Song.Title         |Album             |Artist |Release.Date |Lyrics|\n|------------:|:------------------|:-----------------|:------|:------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|            1|Moonlight Medicine |Carnival of Light |Ride   |20-Jun-94    |5 ContributorsMoonlight Medicine Lyrics It's just a state of mind Freedom and time Has got me frozen up inside I wanna recognise Under this moonlight That god is on my side With senses running wild We touched the sky It looks like heaven in my eyes Moonlight medicine Keeps me alive Don't let your senses be denied Won't you shine Some light in my mind The more I find The more I need your medicine in my life Won't you shine Some light in my mind The more I find The more I need your medicine in my lifeSee Ride LiveGet tickets as low as $54You might also likeEmbed |\n\n\n:::\n:::\n\n\n\n### Data Dictionary\n\n| Field Name     | Data Type | Description                               |\n|----------------|-----------|-------------------------------------------|\n| `Track.Number` | Integer   | The track number of the song in the album |\n| `Song.Title`   | String    | The title of the song                     |\n| `Album`        | String    | The name of the album the song belongs to |\n| `Artist`       | String    | The artist performing the song            |\n| `Release.Date` | String    | The date the song was released            |\n| `Lyrics`       | String    | The lyrics of the song                    |\n\n### Data Cleaning\n\nYou might notice that the lyrics above have some problems like this -\n\n::: callout-warning\n1.  '16 ContributorsBallad of Sister Sue Lyrics' at the beginning and '6Embed' at the end are not part of the lyrics.\n2.  '√¢¬Ä¬ô' - some problem with Unicode encoding/decoding.\n3.  'See Slowdive LiveGet tickets as low as \\$55' - ads is also not part of the lyrics.\n:::\n\nSo, it requires some data cleaning.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean text\nlyrics_clean <- lyrics %>%\n  mutate(Lyrics = stri_enc_toutf8(Lyrics)) %>%\n  mutate(Lyrics = str_replace_all(Lyrics, 'â\\u0080\\u0099', \"'\")) %>%\n  mutate(\n    Lyrics = Lyrics %>%\n      str_remove(\".*Lyrics\") %>%\n      str_remove(\"See.*tickets as low as \\\\$\\\\d+\") %>%\n      str_remove('You might also like') %>%\n      str_remove('\\\\d*\\\\s*Embed$') %>%\n      str_trim()\n  ) %>%\n  filter(!str_detect(Lyrics, \"^\\\\s*$\")) # filter out instrumental pieces\n\n# add some factors for further processing\nlyrics_clean <- lyrics_clean %>%\n  mutate(lyric.length = nchar(Lyrics),\n         Release.Date = dmy(Release.Date),\n         Release.Year = year(Release.Date), \n         Album = factor(Album, \n                        levels = c(\"Isn't Anything\", \"loveless\", \"m b v\", \n                                   \"Nowhere\", \"Going Blank Again\", \"Carnival of Light\", \"Tarantula\", \"Weather Diaries\", \"This is Not a Safe Place\", \"Interplay\", \n                                   \"Just for a Day\", \"Souvlaki\", \"Pygmalion\", \"slowdive\", \"everything is alive\")), \n         Reunite = year(Release.Date) < 2000)\n\nprint(lyrics_clean[1,6])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"It's just a state of mind Freedom and time Has got me frozen up inside I wanna recognise Under this moonlight That god is on my side With senses running wild We touched the sky It looks like heaven in my eyes Moonlight medicine Keeps me alive Don't let your senses be denied Won't you shine Some light in my mind The more I find The more I need your medicine in my life Won't you shine Some light in my mind The more I find The more I need your medicine in my life\"\n```\n\n\n:::\n:::\n\n\n\n## Data Analysis\n\n### What words frequently appear in their lyrics?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('tidytext')\n# tokenize\ntoken <- lyrics_clean %>%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# stopwords dropped\ntoken_clean <- token %>%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\ntoken_count_cloud <- token_clean %>%\n  group_by(Artist) %>%\n  count(Word, name = 'Word_count', sort = TRUE)\n\ntoken_count_head <- token_count_cloud %>%\n  group_by(Artist) %>%\n  slice(1:30) %>%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE))\n\n# make a word cloud\nlibrary(ggplot2)\ntheme_set(theme_bw())\nlibrary(ggwordcloud)\npalette <- c(\n  \"my bloody valentine\" = \"#d83c7a\",\n  \"Ride\" = \"#4b8ab8\",\n  \"Slowdive\" = \"#ae8f32\",\n  \"when you sleep\" = \"#f576a8\",\n  \"Vapour Trail\" = \"#56a8e3\",\n  \"When the Sun Hits\" = \"#d1b971\"\n  )\n\nggplot(token_count_head, aes(\n  label = Word,\n  size = Word_count,\n  color = Artist\n)) +\n  geom_text_wordcloud(word.ratio = 0.2, # adjust for overall word size\n                      max_size = 30) +\n  facet_wrap(~ Artist) +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Most Frequent Words Used in Lyrics',\n    subtitle = \"Slowdive seems to have the most 'meaningful' lyrics.\",\n    caption = 'Word size based on frequency. Only the top 30 results are shown here.'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q1-1.png){width=672}\n:::\n:::\n\n\n\nThe result is kind of amusing. Ride and mbv rely their vocals heavily on harmonies and hummings - and it's reflected honestly here, while slowdive has the most 'meaningful' lyrics among the three. 'Love' is the ultimate meaning of rock and roll, and it indeed appears in high frequency in all of their lyrics.\n\n### Which bands have the longest and shortest lyrics?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plotting\nggplot(lyrics_clean, aes(x = Album, y = lyric.length, fill = Artist)) + \n  geom_boxplot(color = 'black') +\n  scale_fill_manual(values = palette) +\n  labs(\n    title = 'Which bands have the Longest/Shortest Lyrics?',\n    subtitle = 'Mbv has the shortest lyrics while Ride has the longest.',\n    caption = 'Boxplot showing the range and median of lyric lengths for each Album.', \n    color = 'Before Reunion?', \n    y = 'Lyric Length (character)'\n  ) +\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q2-1.png){width=672}\n:::\n:::\n\n\n\nAmong the three bands, Mbv always has the shortest lyrics overall while Ride has the longest. An interesting trend is that while Ride and slowdive have similar lyric length back in the 90s, after reunion, Ride tends to have longer lyrics - and the length increases for each album.\n\n### Who is the saddest shoegaze band?\n\nI used `afinn` from package `tidytext` for sentiment analysis based on this paper[@koto_comparative_2015].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data processing: sentiment 'afinn'\ntoken_count <- token_clean %>%\n  group_by(Artist, Album, Release.Year) %>%\n  count(Word, name = 'Word_count', sort = TRUE)\n\ntoken_afinn <- token_count %>%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\nafinn_score_by_artist <- token_afinn %>%\n  group_by(Artist) %>%\n  summarize(avg = round(mean(value), 2))\n\nkable(afinn_score_by_artist)\n```\n\n::: {.cell-output-display}\n\n\n|Artist              |   avg|\n|:-------------------|-----:|\n|Ride                | -0.06|\n|Slowdive            |  0.00|\n|my bloody valentine | -0.11|\n\n\n:::\n:::\n\n\n\nAmong the three bands, mbv has the lowest sentiment score, which means it is the saddest shoegaze band (if we only look at the lyrics). All three bands got sentiment scores less than or equal to zero, with slowdive holding the highest score (0.00).\n\n#### What about their greatest hits?\n\nUsing data from [last.fm](last.fm), we find out that the greatest hits of the three bands are:\n\n-   *when you sleep* - my bloody valentine (32171 weekly listeners),\n-   *Vapour Trail* - Ride (1943 weekly listeners), and\n-   *When the Sun Hits* - Slowdive (53055 weekly listeners).\n\nI'm interested that whether those songs have a happier or sadder vibe compared to their other songs -\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by song\ntoken_count_bysong <- token_clean %>%\n  group_by(Artist, Song.Title) %>%\n  count(Word, name = 'Word_count', sort = TRUE)\n\n# give afinn score\ntoken_afinn_bysong <- token_count_bysong %>%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\n# clean data set, drop songs with only 1/2 rows\ntoken_afinn_bysong <- token_afinn_bysong %>%\n  group_by(Song.Title) %>%\n  filter(n() > 2) %>%\n  ungroup()\n\n# calculate average scores\nafinn_score_all <- token_afinn_bysong %>%\n  group_by(Song.Title, Artist) %>%\n  summarize(avg_song = mean(value)) \n\n# look at the greatest hits\nafinn_score_gh <- afinn_score_all %>%\n  filter(Song.Title == 'Vapour Trail' | Song.Title == 'When the Sun Hits' | Song.Title == 'when you sleep')\n\n# combine datasets for plotting\nafinn_score_gh <- inner_join(afinn_score_gh, afinn_score_by_artist, by = c(\"Artist\" = \"Artist\"))\n\n# plot\nggplot(afinn_score_gh, aes(x = Artist)) +\n  geom_point(shape = 16, size = 3, aes(y = afinn_score_gh$avg, color = Artist)) +\n  geom_point(shape = 17, size = 3, aes(y = afinn_score_gh$avg_song, color = \nSong.Title)) +\n  scale_color_manual(values = palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(\n    title = 'Who is the Saddest Shoegaze Band?',\n    subtitle = 'Mbv has the lowest overall sentiment score.\\nThe most popular songs have a higher sentiment score than average.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.', \n    y = 'Sentiment Score', \n    x = 'Time', \n    color = 'Artist average/\\ngreatest hits'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q3.2-1.png){width=672}\n:::\n:::\n\n\n\nAll those songs have a slightly higher sentiment score than their artist's average scores. People seem to prefer happy songs!\n\n#### So what are their happiest/saddest songs?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextreme_song <- afinn_score_all %>%\n  group_by(Artist) %>%\n  filter(avg_song == max(avg_song) | avg_song == min(avg_song))\n\nsorted_tibble <- extreme_song %>%\n  group_by(Artist) %>%\n  arrange(Artist, avg_song) %>%\n  ungroup()\n\nkable(sorted_tibble)\n```\n\n::: {.cell-output-display}\n\n\n|Song.Title              |Artist              |  avg_song|\n|:-----------------------|:-------------------|---------:|\n|I Came to See the Wreck |Ride                | -1.500000|\n|Only Now                |Ride                | -1.500000|\n|The Dawn Patrol         |Ride                |  2.000000|\n|The Sadman              |Slowdive            | -2.333333|\n|Everyone Knows          |Slowdive            |  3.000000|\n|if i am                 |my bloody valentine | -1.400000|\n|only shallow            |my bloody valentine |  2.000000|\n\n\n:::\n:::\n\n\n\nWith the table above, we find that Ride's saddest songs are *'I Came to See the Wreck'* and *'Only Now'*, and happiest songs is *'The Dawn Patrol'*; Slowdive's saddest song is *'The Sadman'*, and happiest songs is *'Everyone Knows'*; mbv's saddest song is *'if i am'*, and happiest song is *'only shallow'*. **The Sadman is really sad**.\n\n### Are bands trending towards happiness or sadness over time?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafinn_score <- token_afinn %>%\n  group_by(Artist, Album, Release.Year) %>%\n  summarize(avg = mean(value))\n\nlibrary(ggrepel)\nggplot(afinn_score,\n       aes(x = Release.Year, y = avg, color = Artist, label = Album)) +\n  geom_point() +\n  geom_line() +\n  geom_text_repel(size = 3) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    subtitle = 'The bands are saddest around 1990.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.',\n    color = 'Artist',\n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q4-1.png){width=672}\n:::\n:::\n\n\n\nWhen examining the trend over time, it is noteworthy that at the beginning of their careers, the bands all had very sad lyrics; in the middle of their careers, their lyrics became more positive. It is also interesting to observe that the latest albums of mbv, Ride, and Slowdive are all among the saddest of their entire careers.\n\n# Notes\n\n`Tidyverse` (`dplyr`, `tidyr`): `%>%`, `filter`, `summarize`, `group_by`, `str_remove`, `mutate`, `inner_join`, `anti_join`, etc.\n\n`ggplot2`: `geom_point`, `geom_boxplot`, `geom_line`, etc.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}