{
  "hash": "45d1c6bc106a55119abaaeb4a817e68a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[Data Analysis Project] Who is the saddest shoegaze band?\"\nauthor: \"Yunyi Ru\"\ndate: \"2024-11-08\"\ncategories: [fun, data analysis, text analysis, sentiment analysis, R]\nbibliography: \n - my-refs.bib\n - my-refs2.bib\noutput:\n  html_document:\n    code_folding: hide\n---\n\n\n\n# Introduction\n\n## Why This Project\n\nI'm interested in the 'shoegaze' subgenre of indie rock. This less-known genre, also called 'the scene that celebrates itself', rose from the noise pop scene in the late 80s and early 90s, and has regained popularity recently. An article titled *'The Shoegaze Revival Hit Its Stride in 2023'* [@sherburne_shoegaze_2023] by pitchfork also captures the revival of shoegaze among GenZ populations.\n\n::: column-margin\n![My bloody valentine's 1988 EP 'You made me realise' is a classic shoegaze record.](photo/Youmademerealise.png)\n:::\n\nShoegaze is characterized by heavy use of overdriven guitar and various effect pedals with the combination of the ethereal vocals; the lyrics are often regarded as blank, poetic, and sometimes difficult to distinguish from the instruments. So here comes this project for the indieheads - I want to analyze those usually overlooked lyrics, especially from the perspective of sentiment.\n\nThe bands I want to study are the so-called classic 'big-three' of shoegaze: *my bloody valentine*, *Ride*, and *slowdive*. They were all on the independent record label *Creation* from London, UK, reached their peak in early 90s, disbanded in late 90s due to the fading of the subgenre, and reunited in the 21st century, which make them a perfect fit to study the changes in the lyrics over the years.\n\n## My Questions\n\n1.  What words frequently appear in their lyrics?\n2.  Which bands have the longest and shortest lyrics?\n3.  Who is the saddest shoegaze band?\n4.  Are bands trending towards happiness or sadness over time?\n\n# Project\n\n## Data Acquisition & Wragling\n\n::: column-margin\n![](photo/loveless.png) ![](photo/nowhere.jpg) ![](photo/souvlaki.jpeg)\n:::\n\n### Data Acquisition\n\nLyrics from all studio albums of the 'big three' bands in the shoegaze genre - *my bloody valentine (mbv)*, *Ride*, and *slowdive* - are retrieved from [Genius.com](https://genius.com/) using a Python package named [lyricsgenius](https://www.johnwmillr.com/scraping-genius-lyrics/) [@miller_johnwmillrlyricsgenius_2024] based on Genius API. Please see the author's instructions for details.\n\n::: callout-note\nThe downloaded `.json` files were written into a `.csv` file for further processing. Please go to the [source repository](https://github.com/yunyi-ru/quarto-blog) for more details.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary('stringi')\nlibrary('tidyverse')\nlibrary('lubridate')\nlibrary('knitr')\n\n# reference\nknitr::write_bib(\"rmarkdown\", file = \"my-refs.bib\")\n\n# import data\nlyrics <- read.csv(\"data/lyrics_data.csv\")\nkable(head(lyrics, n = 1))\n```\n\n::: {.cell-output-display}\n\n\n| Track.Number|Song.Title                     |Artist              |Release.Date |Lyrics|Album.Name     |\n|------------:|:------------------------------|:-------------------|:------------||:--------------|\n|            1|Soft as Snow (But Warm Inside) |my bloody valentine |21-Nov-88    |21 ContributorsSoft as Snow (But Warm Inside) Lyrics Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, \"You\" Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they're undressing me (Ooh, ooh) Come inside, it's warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can't see Bring me close to ecstasy High away to heaven, and I'm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you're exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh) You might also like Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh1Embed |Isn’t Anything |\n\n\n:::\n:::\n\n\n\n### Data Dictionary\n\n| Field Name     | Data Type | Description                               |\n|----------------|-----------|-------------------------------------------|\n| `Track.Number` | Integer   | The track number of the song in the album |\n| `Song.Title`   | String    | The title of the song                     |\n| `Artist`       | String    | The artist performing the song            |\n| `Release.Date` | String    | The date the song was released            |\n| `Lyrics`       | String    | The lyrics of the song                    |\n| `Album.Name`   | String    | The name of the album the song belongs to |\n\n### Data Wrangling\n\nThe lyrics directly retrieved from Genius.com usually have some problems -\n\n::: callout-warning\n1.  '16 ContributorsBallad of Sister Sue Lyrics' at the beginning and '6Embed' at the end are not part of the lyrics.\n2.  '√¢¬Ä¬ô' - some problem with Unicode encoding/decoding.\n3.  'See Slowdive LiveGet tickets as low as \\$55' - ads is also not part of the lyrics.\n:::\n\nSo, it requires some data cleaning.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean text\nlyrics_clean <- lyrics %>%\n  mutate(Lyrics = stri_enc_toutf8(Lyrics)) %>%\n  mutate(Lyrics = str_replace_all(Lyrics, 'â\\u0080\\u0099', \"'\")) %>%\n  mutate(\n    Lyrics = Lyrics %>%\n      str_remove(\".*Lyrics\") %>%\n      str_remove(\"See.*tickets as low as \\\\$\\\\d+\") %>%\n      str_remove('You might also like') %>%\n      str_remove('\\\\d*\\\\s*Embed$') %>%\n      str_trim()\n  ) %>%\n  rename(Album = Album.Name) %>%\n  filter(!str_detect(Lyrics, \"^\\\\s*$\")) # filter out instrumental pieces\n\n# add some factors for further processing\nlyrics_clean <- lyrics_clean %>%\n  mutate(lyric.length = nchar(Lyrics),\n         Release.Date = dmy(Release.Date),\n         Release.Year = year(Release.Date))\n\nprint(lyrics_clean[1,'Lyrics'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, \\\"You\\\" Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they're undressing me (Ooh, ooh) Come inside, it's warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can't see Bring me close to ecstasy High away to heaven, and I'm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you're exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh)  Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# this is for ride-only analysis\nlyrics_ride <- lyrics_clean %>%\n  filter(Artist == 'Ride')\n\n# this keeps the dataset working for the original analysis\nlyrics_clean <- lyrics_clean %>%\n  filter(!str_detect(Album, \"\\\\[EP\\\\]\")) %>%\n  mutate(Album = factor(Album, \n                        levels = c(\"Isn’t Anything\", \"loveless\", \"m b v\", \n                                   \"Nowhere\", \"Going Blank Again\", \"Carnival of Light\", \"Tarantula\", \"Weather Diaries\", \"This Is Not a Safe Place\", \"Interplay\", \n                                   \"Just for a Day\", \"Souvlaki\", \"Pygmalion\", \"Slowdive\", \"​​​everything is alive\")))\n```\n:::\n\n\n\n## Data Analysis\n\n### What words frequently appear in their lyrics?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('tidytext')\n\n# tokenize by word\ntoken <- lyrics_clean %>%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# stopwords dropped\ntoken_clean <- token %>%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\ntoken_count_cloud <- token_clean %>%\n  group_by(Artist) %>%\n  count(Word, name = 'Word_count', sort = TRUE)\n\ntoken_count_head <- token_count_cloud %>%\n  group_by(Artist) %>%\n  slice(1:30) %>%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE))\n\n# make a word cloud\nlibrary(ggplot2)\ntheme_set(theme_bw())\nlibrary(ggwordcloud)\npalette <- c(\n  \"my bloody valentine\" = \"#d83c7a\",\n  \"Ride\" = \"#4b8ab8\",\n  \"Slowdive\" = \"#ae8f32\",\n  \"when you sleep\" = \"#f576a8\",\n  \"Vapour Trail\" = \"#56a8e3\",\n  \"When the Sun Hits\" = \"#d1b971\"\n  )\n\nggplot(token_count_head, aes(\n  label = Word,\n  size = Word_count,\n  color = Artist\n)) +\n  geom_text_wordcloud(word.ratio = 0.2, # adjust for overall word size\n                      max_size = 30) +\n  facet_wrap(~ Artist) +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Most Frequently Used Words in Lyrics',\n    caption = 'Word size based on frequency. Only the top 30 results are shown here.'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q1-1.png){width=672}\n:::\n:::\n\n\n\nThe result is kind of amusing. Ride and mbv rely their vocals heavily on **harmonies** and **hummings** - and it's reflected honestly here, while slowdive has the most **'meaningful'** lyrics among the three. 'Love' is the ultimate meaning of rock and roll, and it indeed appears in high frequency in all of their lyrics.\n\n### Which bands have the longest and shortest lyrics?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plotting\nggplot(lyrics_clean, aes(x = Album, y = lyric.length, fill = Artist)) + \n  geom_boxplot(color = 'black') +\n  scale_fill_manual(values = palette) +\n  labs(\n    title = 'Which bands have the Longest/Shortest Lyrics?',\n    caption = 'Boxplot showing the range and median of lyric lengths for each Album.', \n    color = 'Before Reunion?', \n    y = 'Lyric Length (character)'\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q2-1.png){width=672}\n:::\n:::\n\n\n\nAmong the three bands, Mbv always has the shortest lyrics overall while Ride has the longest. An interesting trend is that while Ride and slowdive have similar lyric length back in the 90s, after reunion, Ride tends to have longer lyrics - and the length increases for each album.\n\n### Who is the saddest shoegaze band?\n\nI used `afinn` from package `tidytext` for sentiment analysis based on this paper[@koto_comparative_2015].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data processing: sentiment 'afinn'\ntoken_count <- token_clean %>%\n  group_by(Artist, Album, Release.Year) %>%\n  count(Word, name = 'Word_count', sort = TRUE) %>%\n  ungroup()\n\ntoken_afinn <- token_count %>%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\nafinn_score_by_artist <- token_afinn %>%\n  group_by(Artist) %>%\n  summarize(avg = round(mean(value), 2)) %>%\n  ungroup()\n\nkable(afinn_score_by_artist)\n```\n\n::: {.cell-output-display}\n\n\n|Artist              |   avg|\n|:-------------------|-----:|\n|Ride                | -0.06|\n|Slowdive            |  0.00|\n|my bloody valentine | -0.11|\n\n\n:::\n:::\n\n\n\nAmong the three bands, mbv has the lowest sentiment score, which means it is the saddest shoegaze band (if we only look at the lyrics). All three bands got sentiment scores less than or equal to zero, with slowdive holding the highest score (0.00).\n\n#### What about their greatest hits?\n\nUsing data from [last.fm](last.fm), we find out that the greatest hits of the three bands are:\n\n-   *when you sleep* - my bloody valentine (32171 weekly listeners),\n-   *Vapour Trail* - Ride (1943 weekly listeners), and\n-   *When the Sun Hits* - Slowdive (53055 weekly listeners).\n\nI'm interested that whether those songs have a happier or sadder vibe compared to their other songs -\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by song\ntoken_count_bysong <- token_clean %>%\n  group_by(Artist, Song.Title) %>%\n  count(Word, name = 'Word_count', sort = TRUE) %>%\n  ungroup()\n\n# give afinn score\ntoken_afinn_bysong <- token_count_bysong %>%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\n# clean data set, drop songs with only 1/2 rows\ntoken_afinn_bysong <- token_afinn_bysong %>%\n  group_by(Song.Title) %>%\n  filter(n() > 2) %>%\n  ungroup()\n\n# calculate average scores\nafinn_score_all <- token_afinn_bysong %>%\n  group_by(Song.Title, Artist) %>%\n  summarize(avg_song = mean(value))\n\n# look at the greatest hits\nafinn_score_gh <- afinn_score_all %>%\n  filter(Song.Title == 'Vapour Trail' | Song.Title == 'When the Sun Hits' | Song.Title == 'when you sleep')\n\n# combine datasets for plotting\nafinn_score_gh <- inner_join(afinn_score_gh, afinn_score_by_artist, by = c(\"Artist\" = \"Artist\"))\n\n# plot\nggplot(afinn_score_gh, aes(x = Artist)) +\n  geom_point(shape = 16, size = 3, aes(y = afinn_score_gh$avg, color = Artist)) +\n  geom_point(shape = 17, size = 3, aes(y = afinn_score_gh$avg_song, color = \nSong.Title)) +\n  scale_color_manual(values = palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(\n    title = 'Who is the Saddest Shoegaze Band?',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.', \n    y = 'Sentiment Score', \n    x = 'Time', \n    color = 'Artist average/\\ngreatest hits'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q3.2-1.png){width=672}\n:::\n:::\n\n\n\nMbv has the lowest overall sentiment score. All those songs have a slightly higher sentiment score than their artist's average scores. People seem to prefer happy songs!\n\n#### So what are their happiest/saddest songs?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextreme_song <- afinn_score_all %>%\n  group_by(Artist) %>%\n  filter(avg_song == max(avg_song) | avg_song == min(avg_song)) %>%\n  ungroup()\n\nsorted_tibble <- extreme_song %>%\n  group_by(Artist) %>%\n  arrange(Artist, avg_song) %>%\n  ungroup()\n\nkable(sorted_tibble)\n```\n\n::: {.cell-output-display}\n\n\n|Song.Title              |Artist              |  avg_song|\n|:-----------------------|:-------------------|---------:|\n|I Came to See the Wreck |Ride                | -1.500000|\n|Only Now                |Ride                | -1.500000|\n|The Dawn Patrol         |Ride                |  2.000000|\n|The Sadman              |Slowdive            | -2.333333|\n|Everyone Knows          |Slowdive            |  3.000000|\n|if i am                 |my bloody valentine | -1.400000|\n|only shallow            |my bloody valentine |  2.000000|\n\n\n:::\n:::\n\n\n\nWith the table above, we find that Ride's saddest songs are *'I Came to See the Wreck'* and *'Only Now'*, and happiest songs is *'The Dawn Patrol'*; Slowdive's saddest song is *'The Sadman'*, and happiest songs is *'Everyone Knows'*; mbv's saddest song is *'if i am'*, and happiest song is *'only shallow'*. **The Sadman is really sad**.\n\n### Are bands trending towards happiness or sadness over time?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafinn_score <- token_afinn %>%\n  group_by(Artist, Album, Release.Year) %>%\n  summarize(avg = mean(value))\n\nlibrary(ggrepel)\nggplot(afinn_score,\n       aes(x = Release.Year, y = avg, color = Artist, label = Album)) +\n  geom_point() +\n  geom_line() +\n  geom_text_repel(size = 3) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  scale_color_manual(values = palette) +\n  scale_y_continuous(limits = c(-1,1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.',\n    color = 'Artist',\n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/q4-1.png){width=672}\n:::\n:::\n\n\n\nWhen examining the trend over time, it is noteworthy that at the beginning of their careers, the bands all had very sad lyrics; in the middle of their careers, their lyrics became more positive. It is also interesting to observe that the latest albums of mbv, Ride, and Slowdive are all among the saddest of their entire careers.\n\n# Bonus: Here Comes the RIDE Fan!\n\nRIDE blew my mind when I attended their Nowhere concert with the Charlatans back in Jan 2024 in the amazing venue Union Transfer, Philadelphia. Since then I've become a huge fan... So I couldn't help but did more data analysis on them (!).\n\n**Disclaimer**: I'm by no means overlooking the members who do not write the lyrics. I love you Steve. It's just because I can only do text analysis at this time.\n\n## My Questions\n\n1.  Who writes the lyrics in each album?\n\n2.  What’s the most frequently used words for each lyricist before/after reunion?\n\n3.  Top 5 Words for Each Album\n\n4.  Who is the Saddest Lyricist?\n\n5.  Are they trending towards happiness or sadness over time?\n\n## Data Wrangling\n\nInformation about lyric writers were from interviews and record sleeves.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign lyricist\nandy_bell_songs <- c(\"Drive Blind\", \"Close My Eyes\", \"Like A Daydream\", \"Silver\", \"Dreams Burn Down\", \"Here And Now\", \"Seagull\", \"Kaleidoscope\", \"In a Different Place\", \"Polar Bear\", \"Paralysed\", \"Vapour Trail\", \"Sennen\", \"Beneath\", \"Today\", \"Not Fazed\", \"Chrome Waves\", \"Time of Her Time\", \"Cool Your Boots\", \"Making Judy Smile\", \"Going Blank Again\", \"Howard Hughes\", \"Birdman\", \"Crown of Creation\", \"Endless Road\", \"Magical Spring\", \"I Don’t Know Where It Comes From\", \"Sunshine/Nowhere To Run\", \"Dead Man\", \"Walk on Water\", \"Mary Anne\", \"Castle On The Hill\", \"Gonna Be Alright\", \"The Dawn Patrol\", \"Ride The Wind\", \"Burnin’\", \"Starlight Motel\", \"Charm Assault\", \"Home Is A Feeling\", \"Weather Diaries\", \"Lateral Alice\", \"Cali\", \"Impermanence\",\"Cold Water People\", \"Catch You Dreaming\", \"Future Love\", \"Repetition\", \"Kill Switch\", \"Clouds of Saint Marie\", \"Fifteen Minutes\", \"Jump Jet\", \"Dial Up\", \"End Game\", \"In This Room\", \"Peace Sign\", \"Last Frontier\", \"Light in a Quiet Room\", \"Stay Free\", \"Last Night I Went Somewhere to Dream\", \"Midnight Rider\", \"Portland Rocks\", \"Yesterday Is Just a Song\")\n\nmark_gardener_songs <- c(\"Chelsea Girl\", \"All I Can See\", \"Furthest Sense\", \"Perfect Time\", \"Taste\", \"Decay\", \"Unfamiliar\", \"Leave Them All Behind\", \"Twisterella\", \"Mouse Trap\", \"Time Machine\", \"OX4\", \"Stampede\", \"Moonlight Medicine\", \"1000 Miles\", \"From Time To Time\", \"Only Now\", \"Deep Inside My Pocket\", \"Lannoy Point\", \"White Sands\", \"Pulsar\", \"Keep It Surreal\", \"Shadows Behind the Sun\", \"Monaco\", \"I Came to See the Wreck\", \"Sunrise Chaser\", \"Essaouira\")\n\nloz_colbert_songs <- c(\"Nowhere\", \"Natural Grace\", \"Rocket Silver Symphony\", \"R.I.D.E.\")\n\ncollab_songs <- c(\"All I Want\", \"Eternal Recurrence\")\n\ncover_songs <- c(\"How Does It Feel to Feel?\")\n\nlyrics_ride <- lyrics_ride %>%\n  mutate(lyricist = case_when(\n         Song.Title %in% andy_bell_songs ~ \"Andy.Bell\",\n         Song.Title %in% mark_gardener_songs ~ \"Mark.Gardener\",\n         Song.Title %in% loz_colbert_songs ~ \"Loz.Colbert\",\n         Song.Title %in% collab_songs ~ \"collaboration\",\n         Song.Title %in% cover_songs ~ \"cover\",\n         TRUE ~ NA_character_\n         ),\n         Album = fct_reorder(Album, Release.Date),\n         is90 = Release.Year < 2000)\n```\n:::\n\n\n\n## Data Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tokenize\n# tokenize by word\nride_token <- lyrics_ride %>%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# unique by song\nride_token_unique <- ride_token %>%\n  group_by(Song.Title) %>%\n  distinct(Song.Title, Word, .keep_all = TRUE) %>%\n  ungroup()\n\n# stopwords dropped\nride_token_clean <- ride_token_unique %>%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n```\n:::\n\n\n\n### Who writes the lyrics in each album?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# who writes what\nggplot(lyrics_ride, aes(x = Album, fill = lyricist)) +\ngeom_bar() +\nscale_fill_manual(values = ride_palette) +\nscale_y_continuous(breaks = 1:12, minor_breaks = 1:12) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = 'Who writes the lyrics in each album?',\n    fill = 'Lyricist',\n    y = 'Count', \n    x = 'Album'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ride who writes what-1.png){width=672}\n:::\n:::\n\n\n\nAndy Bell did a lot, especially for Nowhere, Tarantula, and This is Not a Safe Place.\n\n### What's the most frequently used words for each lyricist before/after reunion?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# count - lyricist, is90\nride_token_count <- ride_token_clean %>%\n  group_by(lyricist, is90) %>%\n  count(Word, name = 'Word_count', sort = TRUE) %>% \n  ungroup()\n\n# find top 15\nride_token_count_head_bylyricist <- ride_token_count %>%\n  group_by(lyricist, is90) %>%\n  filter(lyricist == 'Andy.Bell' | lyricist == 'Mark.Gardener') %>%\n  slice(1:15) %>%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %>%\n  ungroup()\n\n# most frequent words\nggplot(ride_token_count_head_bylyricist, aes(x = Word_count, y = Word, fill = is90)) +\n  geom_col() +\n  facet_wrap( ~ lyricist) +\n  scale_fill_manual(values = ride_palette, name = 'Status', labels = c('After Reunion', 'Before Reunion')) +\n  scale_x_continuous(breaks = c(0, 5, 10, 15, 20, 25), minor_breaks = 1:25) +\n  labs(title = \"What's the most frequently used words for each lyricist\\nbefore/after reunion?\",\n    fill = 'Before Reunion',\n    caption = 'Only top 15 frequently used words were shown.',\n    y = 'Word', \n    x = 'Count'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ride most frequent words-1.png){width=672}\n:::\n:::\n\n\n\nIt's surprising that 'time' was used a lot. I'm interested that whether all bands like this word or it's just RIDE. Maybe it would be my next project in the future.\n\n### Top 5 Words for Each Album\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The Word for each album?\nride_token_count_album <- ride_token_clean %>%\n  group_by(Album) %>%\n  count(Word, name = 'Word_count', sort = TRUE)\n\n# find top 5\nride_token_count_album_head <- ride_token_count_album %>%\n  group_by(Album) %>%\n  slice(1:5) %>%\n  filter(!Word_count == 1) %>%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %>%\n  ungroup()\n\n# plotting\nggplot(ride_token_count_album_head, aes(x = Album, y = Word, label = Word)) +\n  geom_text(size = 3, aes(color = Word_count)) +\n  scale_color_continuous(high = '#a688b9', low = '#ccd8e0') +\n  coord_fixed(ratio = 0.3) + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = 'Top 5 Words for Each Album',\n    color = 'Count',\n    y = 'Word', \n    x = 'Album'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ride the word for each album-1.png){width=672}\n:::\n:::\n\n\n\nSome themes are always there - time, day, life, feel...\n\n### Who is the Saddest Lyricist?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# who is more depressed\nride_token_count_aa <- ride_token_clean %>%\n  group_by(lyricist, Album, Release.Date) %>%\n  count(Word, name = 'Word_count', sort = TRUE) %>%\n  ungroup()\n\n# apply sentiment value\nride_token_afinn_aa <- ride_token_count_aa %>%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\")) %>% \n  filter(lyricist == 'Mark.Gardener' | lyricist == 'Andy.Bell' | lyricist == 'Loz.Colbert')\n\n# calculate overall score\nride_afinn_score_by_lyricist <- ride_token_afinn_aa %>%\n  group_by(lyricist) %>%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2)) %>%\n  ungroup()\n\n# plotting\nggplot(ride_afinn_score_by_lyricist, aes(x = lyricist, y = weighted_avg, fill = lyricist, label = weighted_avg)) +\n  geom_col() +\n  geom_text() +\n  scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1.5,1.5)) +\n  scale_fill_manual(values = ride_palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(title = 'Who is the Saddest Lyricist?',\n    y = 'Sentiment Score', \n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.',\n    x = 'Lyricist',\n    fill = 'Lyricist'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ride who is more depressed-1.png){width=672}\n:::\n:::\n\n\n\nMark Gardener seems really sad.\n\n### Are they trending towards happiness or sadness over time?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Is anyone getting more depressed over time?\n# assign affin score for each person for each album\nride_afinn_score_by_lyricist_album <- ride_token_afinn_aa %>%\n  group_by(lyricist, Album, Release.Date) %>%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2))\n\n# geom_line() must work with numeric factor\nride_afinn_score_by_lyricist_album$Album_num <- as.numeric(ride_afinn_score_by_lyricist_album$Album)\n\n# plotting\nggplot(ride_afinn_score_by_lyricist_album, \n       aes(x = Album_num, y = weighted_avg, color = lyricist, shape = lyricist, label = Album)) +\n  geom_point(size = 3) + \n  geom_line() +\n  scale_color_manual(values = ride_palette) +\n  scale_x_continuous(\n    breaks = ride_afinn_score_by_lyricist_album$Album_num,\n    labels = ride_afinn_score_by_lyricist_album$Album\n  ) +\n  scale_y_continuous(limits = c(-2,2)) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n<0: sad/negative, >0: happy/positive.',\n    color = 'lyricist',\n    y = 'Sentiment Score', \n    x = 'Album'\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ride who is getting more depressed-1.png){width=672}\n:::\n:::\n\n\n\nAre people getting sadder when they get old?\n\n*This is a class project of Johns Hopkins University [Biostatistics 140.777 Statistical Programming Paradigms](https://www.stephaniehicks.com/jhustatprogramming2024/) course*.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}