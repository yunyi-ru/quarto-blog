[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Yunyi Ru, and I am a 2nd year master‚Äôs student in the Molecular Microbiology and Immunology department of Johns Hopkins Bloomberg School of Public Health. I currently work as a graduate student researcher at The Pekosz Lab on virology. Outside of lab, I enjoys painting, reading, travelling, and listening and playing music."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "First Blog Post! & Blogging Resources",
    "section": "",
    "text": "üéâ Hi, this is my first blog post!\nThis blog was initially built as a project of the statistical computing class I‚Äôm taking."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yunyi‚Äôs Blog",
    "section": "",
    "text": "Hi, I‚Äôm Yunyi, a student at the Johns Hopkins University, School of Public Health, and a member of the Pekosz lab.\nLooking forward to sharing some useful information with you here! üêæ\n\nThis blog is built with Quarto."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Yunyi's Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nBookmarks for Biologists\n\n\n\n\n\n\nbiology\n\n\nresources\n\n\n\n\n\n\n\n\n\nNov 9, 2024\n\n\n3 min\n\n\n\n\n\n\n\nBlog Design Checklist\n\n\n\n\n\n\nblogging\n\n\n\n\n\n\n\n\n\nOct 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nCoding Resources\n\n\n\n\n\n\ncoding\n\n\nresources\n\n\n\n\n\n\n\n\n\nOct 28, 2024\n\n\n1 min\n\n\n\n\n\n\n\nFirst Blog Post! & Blogging Resources\n\n\n\n\n\n\nblogging\n\n\nresources\n\n\n\n\n\n\n\n\n\nSep 13, 2024\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html#a-bit-of-information",
    "href": "posts/welcome/index.html#a-bit-of-information",
    "title": "First Blog Post",
    "section": "",
    "text": "This blog is built as a project of the statistical computing class I‚Äôm taking."
  },
  {
    "objectID": "posts/welcome/index.html#resources-used-to-build-this-blog",
    "href": "posts/welcome/index.html#resources-used-to-build-this-blog",
    "title": "First Blog Post",
    "section": "Resources Used to Build This Blog",
    "text": "Resources Used to Build This Blog\nI used RStudio + GitHub Pages (rendered to docs) to build this page.\n\nQuarto Guide\nThe Ultimate Guide to Starting a Quarto Blog by Albert Rapp"
  },
  {
    "objectID": "posts/welcome/index.html#resources",
    "href": "posts/welcome/index.html#resources",
    "title": "First Blog Post! & Blogging Resources",
    "section": "Resources",
    "text": "Resources\nI used RStudio + GitHub Pages (rendered to docs) to build this page.\nHere are some useful resources for a blogging newbie‚Ä¶ Will add more in future definitely!\n\nQuarto Guide\nThe Ultimate Guide to Starting a Quarto Blog by Albert Rapp\nComplete List of Github Markdown Emoji Markup\nUCSB Customizing Quarto Websites"
  },
  {
    "objectID": "posts/Blog Design Checklist/index.html",
    "href": "posts/Blog Design Checklist/index.html",
    "title": "Blog Design Checklist",
    "section": "",
    "text": "This is a checklist/memo for some elements I want to add to this blog."
  },
  {
    "objectID": "posts/Blog Design Checklist/index.html#this-is-a-checklist-for-some-elements-i-want-to-add-to-this-blog",
    "href": "posts/Blog Design Checklist/index.html#this-is-a-checklist-for-some-elements-i-want-to-add-to-this-blog",
    "title": "Blog Design Checklist",
    "section": "",
    "text": "RSS Subscription\nContents (based on )\n\n\n\n\n\nSample Data Analysis: 90s Britain indie scene lyrics (140.777)\n[ ]"
  },
  {
    "objectID": "posts/Blog Design Checklist/index.html#checklist",
    "href": "posts/Blog Design Checklist/index.html#checklist",
    "title": "Blog Design Checklist",
    "section": "Checklist",
    "text": "Checklist\n\nFunctions\n\nMove this blog to yunyi-ru.github.io (is this necessary?)\nRSS Subscription\nComment (use utterances?)\nSection\nCustomized theme: minimal, light, serif font\nGallery\nSite Map\nCustomized favicon\nTry other CSS themes\n\n\n\nContents\n\nSample Data Analysis: 90s Britain indie scene lyrics (140.777), categories -&gt; fun\nMove ‚ÄòUseful links for A Molecular Biologist‚Äô here, categories -&gt; molbio\nAdd some blog posts about viral phylogenetics learning resources, categories -&gt; genetics"
  },
  {
    "objectID": "posts/Coding Resources/index.html",
    "href": "posts/Coding Resources/index.html",
    "title": "Coding Resources",
    "section": "",
    "text": "This page lists some coding resources that I find useful."
  },
  {
    "objectID": "posts/Coding Resources/index.html#resources",
    "href": "posts/Coding Resources/index.html#resources",
    "title": "Coding Resources",
    "section": "Resources",
    "text": "Resources\nSetting up VS code for R users\nSetting up VS Code for Python Development like RStudio, R-bloggers\nHow to integrate Python and R in Visual Studio Code, Medium"
  },
  {
    "objectID": "posts/blog_design/index.html",
    "href": "posts/blog_design/index.html",
    "title": "Blog Design Checklist",
    "section": "",
    "text": "This is a checklist/memo for some elements I want to add to this blog."
  },
  {
    "objectID": "posts/blog_design/index.html#checklist",
    "href": "posts/blog_design/index.html#checklist",
    "title": "Blog Design Checklist",
    "section": "Checklist",
    "text": "Checklist\n\nFunctions\n\nRSS Subscription\nComment section (use utterances) 241109\nCustomized theme 241221\nCustomized favicon 241109\n\n\n\nContents\n\nMove ‚ÄòUseful links for A Molecular Biologist‚Äô here, categories -&gt; molbio 241109\nAdd some blog posts about viral phylogenetics learning resources, categories -&gt; genetics"
  },
  {
    "objectID": "posts/coding_resources/index.html",
    "href": "posts/coding_resources/index.html",
    "title": "Coding Resources",
    "section": "",
    "text": "This page lists some coding resources that I find useful."
  },
  {
    "objectID": "posts/coding_resources/index.html#resources",
    "href": "posts/coding_resources/index.html#resources",
    "title": "Coding Resources",
    "section": "Resources",
    "text": "Resources\nSetting up VS code for R users\nSetting up VS Code for Python Development like RStudio, R-bloggers\nHow to integrate Python and R in Visual Studio Code, Medium"
  },
  {
    "objectID": "posts/lyric_analysis/index.html",
    "href": "posts/lyric_analysis/index.html",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "",
    "text": "Shoegaze is an effect-heavy subgenre of indie rock."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#why-this-project",
    "href": "posts/lyric_analysis/index.html#why-this-project",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Why This Project",
    "text": "Why This Project\nI‚Äôm interested in the ‚Äòshoegaze‚Äô subgenre of indie rock. This less-known genre, also called ‚Äòthe scene that celebrates itself‚Äô, rose from the noise pop scene in the late 80s and early 90s, and has regained popularity recently. An article titled ‚ÄòThe Shoegaze Revival Hit Its Stride in 2023‚Äô (Sherburne 2023) by pitchfork also captures the revival of shoegaze among GenZ populations.\n\n\n\n\n\nMy bloody valentine‚Äôs 1988 EP ‚ÄòYou made me realise‚Äô is a classic shoegaze record.\n\n\nShoegaze is characterized by heavy use of overdriven guitar and various effect pedals with the combination of the ethereal vocals; the lyrics are often regarded as blank, poetic, and sometimes difficult to distinguish from the instruments. So here comes this project for the indieheads - I want to analyze those usually overlooked lyrics, especially from the perspective of sentiment.\nThe bands I want to study are the so-called classic ‚Äòbig-three‚Äô of shoegaze: my bloody valentine, Ride, and slowdive. They were all on the independent record label Creation from London, UK, reached their peak in early 90s, disbanded in late 90s due to the fading of the subgenre, and reunited in the 21st century, which make them a perfect fit to study the changes in the lyrics over the years."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#my-auestions",
    "href": "posts/lyric_analysis/index.html#my-auestions",
    "title": "Sample Analysis: Who‚Äôs the most depressing shoegazing band?",
    "section": "",
    "text": "Who is the most depressing shoegazing band?\nWho is the most depressed lyricist?\nIs shoegazing bands becoming happier/sadder over time?"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#data-acquisition-wragling",
    "href": "posts/lyric_analysis/index.html#data-acquisition-wragling",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Data Acquisition & Wragling",
    "text": "Data Acquisition & Wragling\n\n\n  \n\nData Acquisition\nLyrics from all studio albums of the ‚Äòbig three‚Äô bands in the shoegaze genre - my bloody valentine (mbv), Ride, and slowdive - are retrieved from Genius.com using a Python package named lyricsgenius(Miller 2024) based on Genius API. Please see the author‚Äôs instructions for details.\n\n\n\n\n\n\nNote\n\n\n\nThe downloaded .json files were written into a .csv file for further processing. Please go to the source repository for more details.\n\n\n\n# load packages\nlibrary('stringi')\nlibrary('tidyverse')\nlibrary('lubridate')\nlibrary('knitr')\n\n# reference\nknitr::write_bib(\"rmarkdown\", file = \"my-refs.bib\")\n\n# import data\nlyrics &lt;- read.csv(\"data/lyrics_data.csv\")\nkable(head(lyrics, n = 1))\n\n\n\n\n\n\n\n\n\n\n\n\nTrack.Number\nSong.Title\nArtist\nRelease.Date\nLyrics\nAlbum.Name\n\n\n\n\n1\nSoft as Snow (But Warm Inside)\nmy bloody valentine\n21-Nov-88\n21 ContributorsSoft as Snow (But Warm Inside) Lyrics Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, ‚ÄúYou‚Äù Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they‚Äôre undressing me (Ooh, ooh) Come inside, it‚Äôs warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can‚Äôt see Bring me close to ecstasy High away to heaven, and I‚Äôm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you‚Äôre exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh) You might also like Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh1Embed\nIsn‚Äôt Anything\n\n\n\n\n\n\n\nData Dictionary\n\n\n\n\n\n\n\n\nField Name\nData Type\nDescription\n\n\n\n\nTrack.Number\nInteger\nThe track number of the song in the album\n\n\nSong.Title\nString\nThe title of the song\n\n\nArtist\nString\nThe artist performing the song\n\n\nRelease.Date\nString\nThe date the song was released\n\n\nLyrics\nString\nThe lyrics of the song\n\n\nAlbum.Name\nString\nThe name of the album the song belongs to\n\n\n\n\n\nData Wrangling\nThe lyrics directly retrieved from Genius.com usually have some problems -\n\n\n\n\n\n\nWarning\n\n\n\n\n‚Äò16 ContributorsBallad of Sister Sue Lyrics‚Äô at the beginning and ‚Äò6Embed‚Äô at the end are not part of the lyrics.\n‚Äò‚àö¬¢¬¨√Ñ¬¨√¥‚Äô - some problem with Unicode encoding/decoding.\n‚ÄòSee Slowdive LiveGet tickets as low as $55‚Äô - ads is also not part of the lyrics.\n\n\n\nSo, it requires some data cleaning.\n\n# clean text\nlyrics_clean &lt;- lyrics %&gt;%\n  mutate(Lyrics = stri_enc_toutf8(Lyrics)) %&gt;%\n  mutate(Lyrics = str_replace_all(Lyrics, '√¢\\u0080\\u0099', \"'\")) %&gt;%\n  mutate(\n    Lyrics = Lyrics %&gt;%\n      str_remove(\".*Lyrics\") %&gt;%\n      str_remove(\"See.*tickets as low as \\\\$\\\\d+\") %&gt;%\n      str_remove('You might also like') %&gt;%\n      str_remove('\\\\d*\\\\s*Embed$') %&gt;%\n      str_trim()\n  ) %&gt;%\n  rename(Album = Album.Name) %&gt;%\n  filter(!str_detect(Lyrics, \"^\\\\s*$\")) # filter out instrumental pieces\n\n# add some factors for further processing\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  mutate(lyric.length = nchar(Lyrics),\n         Release.Date = dmy(Release.Date),\n         Release.Year = year(Release.Date))\n\nprint(lyrics_clean[1,'Lyrics'])\n\n[1] \"Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, \\\"You\\\" Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they're undressing me (Ooh, ooh) Come inside, it's warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can't see Bring me close to ecstasy High away to heaven, and I'm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you're exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh)  Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh\"\n\n# this is for ride-only analysis\nlyrics_ride &lt;- lyrics_clean %&gt;%\n  filter(Artist == 'Ride')\n\n# this keeps the dataset working for the original analysis\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  filter(!str_detect(Album, \"\\\\[EP\\\\]\")) %&gt;%\n  mutate(Album = factor(Album, \n                        levels = c(\"Isn‚Äôt Anything\", \"loveless\", \"m b v\", \n                                   \"Nowhere\", \"Going Blank Again\", \"Carnival of Light\", \"Tarantula\", \"Weather Diaries\", \"This Is Not a Safe Place\", \"Interplay\", \n                                   \"Just for a Day\", \"Souvlaki\", \"Pygmalion\", \"Slowdive\", \"‚Äã‚Äã‚Äãeverything is alive\")))"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#section",
    "href": "posts/lyric_analysis/index.html#section",
    "title": "Sample Analysis: Who‚Äôs the most depressing shoegazing band?",
    "section": "1.",
    "text": "1."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#section-1",
    "href": "posts/lyric_analysis/index.html#section-1",
    "title": "Sample Analysis: Who‚Äôs the most depressing shoegazing band?",
    "section": "2.",
    "text": "2."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#section-2",
    "href": "posts/lyric_analysis/index.html#section-2",
    "title": "Sample Analysis: Who‚Äôs the most depressing shoegazing band?",
    "section": "3.",
    "text": "3."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#my-questions",
    "href": "posts/lyric_analysis/index.html#my-questions",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "My Questions",
    "text": "My Questions\n\nWhat words frequently appear in their lyrics?\nWhich bands have the longest and shortest lyrics?\nWho is the saddest shoegaze band?\nAre bands trending towards happiness or sadness over time?"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#who-is-the-most-depressing-shoegaze-band",
    "href": "posts/lyric_analysis/index.html#who-is-the-most-depressing-shoegaze-band",
    "title": "Example Analysis: Who‚Äôs the most depressing shoegaze band?",
    "section": "Who is the most depressing shoegaze band?",
    "text": "Who is the most depressing shoegaze band?\n\n## data processing: sentiment 'afinn'\ntoken_afinn &lt;- token_count %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\nafinn_score_by_artist &lt;- token_afinn %&gt;%\n  group_by(Artist) %&gt;%\n  summarize(avg = mean(value))\n\nggplot(afinn_score_by_artist, aes(x = Artist, y = avg, fill = Artist)) +\n  geom_col() +\n  scale_fill_manual(values = palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(\n    title = 'Who is the Most Depressing Shoegaze Band?',\n    subtitle = 'Mbv has the lowest overall sentiment score.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.', \n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n\n\n\n\n\n\n\n\nAmong the three bands, mbv has the lowest sentiment score, which means it is the most depressing shoegaze band (if we only look at the lyrics). All three bands got sentiment scores less than or equal to zero, with slowdive holding the highest score (0.00)."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#who-is-the-most-depressed-lyricist",
    "href": "posts/lyric_analysis/index.html#who-is-the-most-depressed-lyricist",
    "title": "Example Analysis: Who‚Äôs the most depressing shoegaze band?",
    "section": "2. Who is the most depressed lyricist?",
    "text": "2. Who is the most depressed lyricist?"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#is-shoegaze-bands-becoming-happiersadder-over-time",
    "href": "posts/lyric_analysis/index.html#is-shoegaze-bands-becoming-happiersadder-over-time",
    "title": "Example Analysis: Who‚Äôs the most depressing shoegaze band?",
    "section": "3. Is shoegaze bands becoming happier/sadder over time?",
    "text": "3. Is shoegaze bands becoming happier/sadder over time?"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#data-analysis",
    "href": "posts/lyric_analysis/index.html#data-analysis",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Data Analysis",
    "text": "Data Analysis\n\nWhat words frequently appear in their lyrics?\n\nlibrary('tidytext')\n\n# tokenize by word\ntoken &lt;- lyrics_clean %&gt;%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# stopwords dropped\ntoken_clean &lt;- token %&gt;%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\ntoken_count_cloud &lt;- token_clean %&gt;%\n  group_by(Artist) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE)\n\ntoken_count_head &lt;- token_count_cloud %&gt;%\n  group_by(Artist) %&gt;%\n  slice(1:30) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE))\n\n# make a word cloud\nlibrary(ggplot2)\ntheme_set(theme_bw())\nlibrary(ggwordcloud)\npalette &lt;- c(\n  \"my bloody valentine\" = \"#d83c7a\",\n  \"Ride\" = \"#4b8ab8\",\n  \"Slowdive\" = \"#ae8f32\",\n  \"when you sleep\" = \"#f576a8\",\n  \"Vapour Trail\" = \"#56a8e3\",\n  \"When the Sun Hits\" = \"#d1b971\"\n  )\n\nggplot(token_count_head, aes(\n  label = Word,\n  size = Word_count,\n  color = Artist\n)) +\n  geom_text_wordcloud(word.ratio = 0.2, # adjust for overall word size\n                      max_size = 30) +\n  facet_wrap(~ Artist) +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Most Frequent Words Used in Lyrics',\n    subtitle = \"Slowdive seems to have the most 'meaningful' lyrics.\",\n    caption = 'Word size based on frequency. Only the top 30 results are shown here.'\n  )\n\n\n\n\n\n\n\n\nThe result is kind of amusing. Ride and mbv rely their vocals heavily on harmonies and hummings - and it‚Äôs reflected honestly here, while slowdive has the most ‚Äòmeaningful‚Äô lyrics among the three. ‚ÄòLove‚Äô is the ultimate meaning of rock and roll, and it indeed appears in high frequency in all of their lyrics.\n\n\nWhich bands have the longest and shortest lyrics?\n\n# plotting\nggplot(lyrics_clean, aes(x = Album, y = lyric.length, fill = Artist)) + \n  geom_boxplot(color = 'black') +\n  scale_fill_manual(values = palette) +\n  labs(\n    title = 'Which bands have the Longest/Shortest Lyrics?',\n    subtitle = 'Mbv has the shortest lyrics while Ride has the longest.',\n    caption = 'Boxplot showing the range and median of lyric lengths for each Album.', \n    color = 'Before Reunion?', \n    y = 'Lyric Length (character)'\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAmong the three bands, Mbv always has the shortest lyrics overall while Ride has the longest. An interesting trend is that while Ride and slowdive have similar lyric length back in the 90s, after reunion, Ride tends to have longer lyrics - and the length increases for each album.\n\n\nWho is the saddest shoegaze band?\nI used afinn from package tidytext for sentiment analysis based on this paper(Koto and Adriani 2015).\n\n# data processing: sentiment 'afinn'\ntoken_count &lt;- token_clean %&gt;%\n  group_by(Artist, Album, Release.Year) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\ntoken_afinn &lt;- token_count %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\nafinn_score_by_artist &lt;- token_afinn %&gt;%\n  group_by(Artist) %&gt;%\n  summarize(avg = round(mean(value), 2)) %&gt;%\n  ungroup()\n\nkable(afinn_score_by_artist)\n\n\n\n\nArtist\navg\n\n\n\n\nRide\n-0.06\n\n\nSlowdive\n0.00\n\n\nmy bloody valentine\n-0.11\n\n\n\n\n\nAmong the three bands, mbv has the lowest sentiment score, which means it is the saddest shoegaze band (if we only look at the lyrics). All three bands got sentiment scores less than or equal to zero, with slowdive holding the highest score (0.00).\n\nWhat about their greatest hits?\nUsing data from last.fm, we find out that the greatest hits of the three bands are:\n\nwhen you sleep - my bloody valentine (32171 weekly listeners),\nVapour Trail - Ride (1943 weekly listeners), and\nWhen the Sun Hits - Slowdive (53055 weekly listeners).\n\nI‚Äôm interested that whether those songs have a happier or sadder vibe compared to their other songs -\n\n# by song\ntoken_count_bysong &lt;- token_clean %&gt;%\n  group_by(Artist, Song.Title) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\n# give afinn score\ntoken_afinn_bysong &lt;- token_count_bysong %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\n# clean data set, drop songs with only 1/2 rows\ntoken_afinn_bysong &lt;- token_afinn_bysong %&gt;%\n  group_by(Song.Title) %&gt;%\n  filter(n() &gt; 2) %&gt;%\n  ungroup()\n\n# calculate average scores\nafinn_score_all &lt;- token_afinn_bysong %&gt;%\n  group_by(Song.Title, Artist) %&gt;%\n  summarize(avg_song = mean(value))\n\n# look at the greatest hits\nafinn_score_gh &lt;- afinn_score_all %&gt;%\n  filter(Song.Title == 'Vapour Trail' | Song.Title == 'When the Sun Hits' | Song.Title == 'when you sleep')\n\n# combine datasets for plotting\nafinn_score_gh &lt;- inner_join(afinn_score_gh, afinn_score_by_artist, by = c(\"Artist\" = \"Artist\"))\n\n# plot\nggplot(afinn_score_gh, aes(x = Artist)) +\n  geom_point(shape = 16, size = 3, aes(y = afinn_score_gh$avg, color = Artist)) +\n  geom_point(shape = 17, size = 3, aes(y = afinn_score_gh$avg_song, color = \nSong.Title)) +\n  scale_color_manual(values = palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(\n    title = 'Who is the Saddest Shoegaze Band?',\n    subtitle = 'Mbv has the lowest overall sentiment score.\\nThe most popular songs have a higher sentiment score than average.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.', \n    y = 'Sentiment Score', \n    x = 'Time', \n    color = 'Artist average/\\ngreatest hits'\n  )\n\n\n\n\n\n\n\n\nAll those songs have a slightly higher sentiment score than their artist‚Äôs average scores. People seem to prefer happy songs!\n\n\nSo what are their happiest/saddest songs?\n\nextreme_song &lt;- afinn_score_all %&gt;%\n  group_by(Artist) %&gt;%\n  filter(avg_song == max(avg_song) | avg_song == min(avg_song)) %&gt;%\n  ungroup()\n\nsorted_tibble &lt;- extreme_song %&gt;%\n  group_by(Artist) %&gt;%\n  arrange(Artist, avg_song) %&gt;%\n  ungroup()\n\nkable(sorted_tibble)\n\n\n\n\nSong.Title\nArtist\navg_song\n\n\n\n\nI Came to See the Wreck\nRide\n-1.500000\n\n\nOnly Now\nRide\n-1.500000\n\n\nThe Dawn Patrol\nRide\n2.000000\n\n\nThe Sadman\nSlowdive\n-2.333333\n\n\nEveryone Knows\nSlowdive\n3.000000\n\n\nif i am\nmy bloody valentine\n-1.400000\n\n\nonly shallow\nmy bloody valentine\n2.000000\n\n\n\n\n\nWith the table above, we find that Ride‚Äôs saddest songs are ‚ÄòI Came to See the Wreck‚Äô and ‚ÄòOnly Now‚Äô, and happiest songs is ‚ÄòThe Dawn Patrol‚Äô; Slowdive‚Äôs saddest song is ‚ÄòThe Sadman‚Äô, and happiest songs is ‚ÄòEveryone Knows‚Äô; mbv‚Äôs saddest song is ‚Äòif i am‚Äô, and happiest song is ‚Äòonly shallow‚Äô. The Sadman is really sad.\n\n\n\nAre bands trending towards happiness or sadness over time?\n\nafinn_score &lt;- token_afinn %&gt;%\n  group_by(Artist, Album, Release.Year) %&gt;%\n  summarize(avg = mean(value))\n\nlibrary(ggrepel)\nggplot(afinn_score,\n       aes(x = Release.Year, y = avg, color = Artist, label = Album)) +\n  geom_point() +\n  geom_line() +\n  geom_text_repel(size = 3) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  scale_color_manual(values = palette) +\n  scale_y_continuous(limits = c(-1,1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    subtitle = 'The bands are saddest around 1990.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'Artist',\n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n\n\n\n\n\n\n\n\nWhen examining the trend over time, it is noteworthy that at the beginning of their careers, the bands all had very sad lyrics; in the middle of their careers, their lyrics became more positive. It is also interesting to observe that the latest albums of mbv, Ride, and Slowdive are all among the saddest of their entire careers.\n\n\n\n\n\n\nNote\n\n\n\nPackages Used\n\nTidyverse: %&gt;%, group_by(), mutate(), arrange(), filter(), etc.\nggplot2: geom_text_repel(), geom_point(), geom_boxplot(), etc."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#are-bands-trending-towards-happiness-or-sadness-over-time",
    "href": "posts/lyric_analysis/index.html#are-bands-trending-towards-happiness-or-sadness-over-time",
    "title": "Example Analysis: Who‚Äôs the most depressing shoegaze band?",
    "section": "Are bands trending towards happiness or sadness over time?",
    "text": "Are bands trending towards happiness or sadness over time?\n\nafinn_score &lt;- token_afinn %&gt;%\n  group_by(Artist, Album, Release.Year) %&gt;%\n  summarize(avg = mean(value))\n\nlibrary(ggrepel)\nggplot(afinn_score,\n       aes(x = Release.Year, y = avg, color = Artist, label = Album)) +\n  geom_point() +\n  geom_line() +\n  geom_text_repel(size = 3) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    subtitle = 'The bands are saddest around 1990.',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'Artist',\n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n\n\n\n\n\n\n\n\nWhen examining the trend over time, it is noteworthy that at the beginning of their careers, the bands all had very sad lyrics; in the middle of their careers, their lyrics became more positive. It is also interesting to observe that the latest albums of mbv, Ride, and Slowdive are all among the saddest of their entire careers."
  },
  {
    "objectID": "posts/lyric_analysis/index.html#functions-used",
    "href": "posts/lyric_analysis/index.html#functions-used",
    "title": "Example Analysis: Who is the most depressing shoegaze band?",
    "section": "Functions Used",
    "text": "Functions Used\nTidyverse (dplyr, tidyr): %&gt;%, filter, summarize, group_by, str_remove, mutate, inner_join, anti_join, etc.\nggplot2: geom_point, geom_boxplot, geom_line, etc."
  },
  {
    "objectID": "posts/about/index.html",
    "href": "posts/about/index.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Yunyi Ru, and I am a 2nd year master‚Äôs student in the Molecular Microbiology and Immunology department of Johns Hopkins Bloomberg School of Public Health. I currently work as a graduate student researcher at The Pekosz Lab on virology. Outside of lab, I enjoys painting, reading, travelling, and listening and playing music."
  },
  {
    "objectID": "posts/about/index.html#education",
    "href": "posts/about/index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nJohns Hopkins University | Baltimore, MD\nScM in Molecular Microbiology and Immunology | August 2023 - May 2025\nDuke Kunshan University/Duke University | Kunshan, China/Durham, NC\nB.S. in Cell and Molecular Biology (Dual Degree) | August 2019 - May 2023"
  },
  {
    "objectID": "posts/about/index.html#experience",
    "href": "posts/about/index.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n\nResearch\nThe Pekosz Lab, Johns Hopkins University | Graduate Student Researcher | October 2023 - Present\n\nIsolated and characterized lab-adapted and circulating respiratory syncytial virus using various molecular biology and genetics methods.\n\nThe Lin Lab, Duke Kunshan University | Undergraduate Student Researcher | October 2021 - May 2023\n\nMonitored and analyzed changes in antibiotic resistance gene prevalence in a local shallow lake over the year.\n\niGEM Competition 2022, Duke Kunshan University | Team Leader | December 2021 - October 2022\n\nDesigned an engineered bacteria strain by molecular cloning and protein expression.\n\nGlobal Health Resource Center, Duke Kunshan University | Undergraduate Student Researcher | August 2020 - December 2020\n\nConducted surveys and interviews to assess the current situation of chronic disease management and control in 4 local communities.\n\n\n\nOthers\nR3ISE Center, Johns Hopkins University | Research Assistant | October 2023 - Present\n\nInitiated the ‚ÄòR3 Read Today‚Äô project by selecting and presenting content on important topics related to responsible scientific practices for science communication on X and Instagram.\n\nAcademic Resource Center, Duke Kunshan University | Teaching Assistant | October 2021 - December 2021\nHOB Biotech Group Suzhou Co., Ltd | R&D Intern | July 2021 - August 2021\nCrystal Pharmatech Co., Ltd | R&D Intern | May 2020 - June 2020"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nJohns Hopkins University | Baltimore, MD\nScM in Molecular Microbiology and Immunology | August 2023 - May 2025\nDuke Kunshan University/Duke University | Kunshan, China/Durham, NC\nB.S. in Cell and Molecular Biology (Dual Degree) | August 2019 - May 2023"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n\nResearch\nThe Pekosz Lab, Johns Hopkins University | Graduate Student Researcher | October 2023 - Present\n\nIsolated and characterized lab-adapted and circulating respiratory syncytial virus using various molecular biology and genetics methods.\n\nThe Lin Lab, Duke Kunshan University | Undergraduate Student Researcher | October 2021 - May 2023\n\nMonitored and analyzed changes in antibiotic resistance gene prevalence in a local shallow lake over the year.\n\niGEM Competition 2022, Duke Kunshan University | Team Leader | December 2021 - October 2022\n\nDesigned an engineered bacteria strain by molecular cloning and protein expression.\n\nGlobal Health Resource Center, Duke Kunshan University | Undergraduate Student Researcher | August 2020 - December 2020\n\nConducted surveys and interviews to assess the current situation of chronic disease management and control in 4 local communities.\n\n\n\nOthers\nR3ISE Center, Johns Hopkins University | Research Assistant | October 2023 - Present\n\nInitiated the ‚ÄòR3 Read Today‚Äô project by selecting and presenting content on important topics related to responsible scientific practices for science communication on X and Instagram.\n\nAcademic Resource Center, Duke Kunshan University | Teaching Assistant | October 2021 - December 2021\nHOB Biotech Group Suzhou Co., Ltd | R&D Intern | July 2021 - August 2021\nCrystal Pharmatech Co., Ltd | R&D Intern | May 2020 - June 2020"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nJohns Hopkins University | Baltimore, MD\nScM in Molecular Microbiology and Immunology | August 2023 - May 2025\nDuke Kunshan University/Duke University | Kunshan, China/Durham, NC\nB.S. in Cell and Molecular Biology (Dual Degree) | August 2019 - May 2023"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n\nResearch\nThe Pekosz Lab, Johns Hopkins University | Graduate Student Researcher | October 2023 - Present\n\nIsolated and characterized lab-adapted and circulating respiratory syncytial virus using various molecular biology and genetics methods.\n\nThe Lin Lab, Duke Kunshan University | Undergraduate Student Researcher | October 2021 - May 2023\n\nMonitored and analyzed changes in antibiotic resistance gene prevalence in a local shallow lake over the year.\n\niGEM Competition 2022, Duke Kunshan University | Team Leader | December 2021 - October 2022\n\nDesigned an engineered bacteria strain by molecular cloning and protein expression.\n\nGlobal Health Resource Center, Duke Kunshan University | Undergraduate Student Researcher | August 2020 - December 2020\n\nConducted surveys and interviews to assess the current situation of chronic disease management and control in 4 local communities.\n\n\n\nOthers\nR3ISE Center, Johns Hopkins University | Research Assistant | October 2023 - Present\n\nInitiated the ‚ÄòR3 Read Today‚Äô project by selecting and presenting content on important topics related to responsible scientific practices for science communication on X and Instagram.\n\nAcademic Resource Center, Duke Kunshan University | Teaching Assistant | October 2021 - December 2021\nHOB Biotech Group Suzhou Co., Ltd | R&D Intern | July 2021 - August 2021\nCrystal Pharmatech Co., Ltd | R&D Intern | May 2020 - June 2020"
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Yunyi Ru. I am a 2nd year master‚Äôs student in the Molecular Microbiology and Immunology department of Johns Hopkins Bloomberg School of Public Health. I currently work as a graduate student researcher at The Pekosz Lab on respiratory syncytial virus.\n\n\n\n\n\nI made this blog to share things that I find useful and interesting regarding science, and hopefully you will also enjoy my contents.\n\n\nRecent Highlights\nI worked with my friend Juanyu to create an interactive dashboard which explores the relationship between environmental parameters and respiratory virus-associated hospitalization rates. Check it out!\n\n\n\nOutside of lab, I enjoy painting, reading, travelling, and listening and playing music.\nMy name Yunyi writes as ‰∫ëË°£ in Chinese - it comes from a poem by Li Bai, a poet my mom loves:\n\n‰∫ëÊÉ≥Ë°£Ë£≥Ëä±ÊÉ≥ÂÆπÔºåÊò•È£éÊãÇÊßõÈú≤ÂçéÊµì„ÄÇThe clouds resemble her dress, and the flowers mirror her beauty. In the spring breeze brushing against the balcony, the dewdrops gleam richly. (English Translation provided by ChatGPT)"
  },
  {
    "objectID": "aboutme.html#education",
    "href": "aboutme.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nJohns Hopkins University | Baltimore, MD\nScM in Molecular Microbiology and Immunology | August 2023 - May 2025\nDuke Kunshan University/Duke University | Kunshan, China/Durham, NC\nB.S. in Cell and Molecular Biology (Dual Degree) | August 2019 - May 2023"
  },
  {
    "objectID": "aboutme.html#experience",
    "href": "aboutme.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n\nResearch\nThe Pekosz Lab, Johns Hopkins University | Graduate Student Researcher | October 2023 - Present\n\nIsolated and characterized lab-adapted and circulating respiratory syncytial virus using various molecular biology and genetics methods.\n\nThe Lin Lab, Duke Kunshan University | Undergraduate Student Researcher | October 2021 - May 2023\n\nMonitored and analyzed changes in antibiotic resistance gene prevalence in a local shallow lake over the year.\n\niGEM Competition 2022, Duke Kunshan University | Team Leader | December 2021 - October 2022\n\nDesigned an engineered bacteria strain by molecular cloning and protein expression.\n\nGlobal Health Resource Center, Duke Kunshan University | Undergraduate Student Researcher | August 2020 - December 2020\n\nConducted surveys and interviews to assess the current situation of chronic disease management and control in 4 local communities.\n\n\n\nOthers\nR3ISE Center, Johns Hopkins University | Research Assistant | October 2023 - October 2024\n\nInitiated the ‚ÄòR3 Read Today‚Äô project by selecting and presenting content on important topics related to responsible scientific practices for science communication on X and Instagram.\n\nAcademic Resource Center, Duke Kunshan University | Teaching Assistant | October 2021 - December 2021\nHOB Biotech Group Suzhou Co., Ltd | R&D Intern | July 2021 - August 2021\nCrystal Pharmatech Co., Ltd | R&D Intern | May 2020 - June 2020"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#molecular-cloning",
    "href": "posts/useful_bio_links/index.html#molecular-cloning",
    "title": "Bookmarks for Biologists",
    "section": "Molecular Cloning",
    "text": "Molecular Cloning\n\nYouTube Tutorial: Choose Expression Vectors\nAAT Bioquest: Restriction Enzymes Cut Sizes Reference Table\nBlog (CN): ÂèåÈÖ∂Âàá\nBlog (CN): ËõãÁôΩÊ†áÁ≠æ_1\nBlog (CN): ËõãÁôΩÊ†áÁ≠æ_2\nResearchGate: 3xHA Linker\nBlog (CN): ÂØÜÁ†ÅÂ≠ê‰ºòÂåñ\nBlog (CN): ‰øùÊä§Á¢±Âü∫_1\nBlog (CN): ‰øùÊä§Á¢±Âü∫_2\nAddgene: Primer Design\nYouTube Tutorial: Primer Design using Benchling\nBlog (CN): ÂºïÁâ©ËÆæËÆ°_Áü•‰πé\nResearchGate: Universal Primers vs.¬†Degenerate Primers\nBL21-DE3 Competent Cell Transformation_NEB\nBlog (CN): Ë¥®Á≤íÁöÑËΩ¨Âåñ\nPlasmid Miniprep\nAlkaline Lysis\nGuide of Analyzing Gel Electrophoresis Results\nCauses of Faint Bands in Gel Electrophoresis"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#protein-analysis",
    "href": "posts/useful_bio_links/index.html#protein-analysis",
    "title": "Bookmarks for Biologists",
    "section": "Protein Analysis",
    "text": "Protein Analysis\n\nAddgene: Western Blot\nAbsorption Spectroscopy\nNinhydrin Reaction Mechanism"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#sequencing",
    "href": "posts/useful_bio_links/index.html#sequencing",
    "title": "Bookmarks for Biologists",
    "section": "Sequencing",
    "text": "Sequencing\n\nSanger Sequencing\n\nSequencing Chromatograms Interpretation\nDNA Barcoding: Promise and Pitfalls\n\n\n\nNGS/Next-Generation Sequencing\n\nGenomic Data Science_Coursera\nSpacer DNA\nDADA2 Tutorial\nBlog (CN): DADA2 ‰∏≠ÊñáÊïôÁ®ã\n16s RefSeq Records Processing and Curation\nBioinformatics_Coursera\nBioinformatic Methods I_Coursera\nAlgorithms for DNA Sequencing_Coursera\nphyloseq: R package for learning microbiome"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#quantitative-pcr",
    "href": "posts/useful_bio_links/index.html#quantitative-pcr",
    "title": "Bookmarks for Biologists",
    "section": "Quantitative PCR",
    "text": "Quantitative PCR\n\nBlog (CN): ÊèêÂçáÊâ©Â¢ûÊïàÁéá_1\nBlog (CN): ÊèêÂçáÊâ©Â¢ûÊïàÁéá_2\nCRAN: Analysis of qPCR Data, R package\nPublish qPCR data with bar graph_ggplot2"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#crispr",
    "href": "posts/useful_bio_links/index.html#crispr",
    "title": "Bookmarks for Biologists",
    "section": "CRISPR",
    "text": "CRISPR\n\nGPP sgRNA Designer\nGenScript gRNA Design Tool\nAddgene CRISPR\nThermofisher CRISPR\nSynthego"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#databasetools",
    "href": "posts/useful_bio_links/index.html#databasetools",
    "title": "Bookmarks for Biologists",
    "section": "",
    "text": "NCBI BLAST/Basic Local Alignment Search Tool: Just BLAST.\nAddgene: A database for plasmids and vectors.\nCARD/The Comprehensive Antibiotic Resistance Database: A database for ARGs/ARBs.\nRCSB PDB/Protein Data Bank: A database for protein structures.\nThe Jackson Laboratory: A database for mouse models.\nAlphaFold: A database/tool for protein structures predicted by AlphaFold.\nTALEN Designer: A TALEN vector designer.\nUCSF Chimera: A tool for protein 3D structure analysis.\nBenchling: A cloud-based platform for biotech R&D. Similar to SnapGene.\nSignalP: Predicts the presence and location of signal peptide cleavage sites in amino acid sequences from different organisms.\nBioconductor: A powerful R package for bioinformatics analysis.\nTimeTree: The Timescale of Life: A tool for phylogenetic analysis (for fun).\nMelting Temperature (Tm) Calculation\nPrimer Designing Tool\n\n\n\n\nChoose Expression Vectors\nAAT Bioquest: Restriction Enzymes Cut Sizes Reference Table\nÂèåÈÖ∂Âàá\nËõãÁôΩÊ†áÁ≠æ_1\nËõãÁôΩÊ†áÁ≠æ_2\n3xHA Linker\nÂØÜÁ†ÅÂ≠ê‰ºòÂåñ\n‰øùÊä§Á¢±Âü∫_1\n‰øùÊä§Á¢±Âü∫_2\nPrimer Design_Addgene\nPrimer Design using Benchling\nÂºïÁâ©ËÆæËÆ°_Áü•‰πé\nUniversal Primers vs.¬†Degenerate Primers\n\n\n\n\n\nBL21-DE3 Competent Cell Transformation_NEB\nË¥®Á≤íÁöÑËΩ¨Âåñ\n\n\n\n\n\nPlasmid Miniprep\nAlkaline Lysis\n\n\n\n\n\nGuide of Analyzing Gel Electrophoresis Results\nCauses of Faint Bands in Gel Electrophoresis"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#vendors",
    "href": "posts/useful_bio_links/index.html#vendors",
    "title": "Useful Links for Biologists",
    "section": "",
    "text": "Genewiz-Azenta/ÈáëÂîØÊô∫-ÂÆâÂçáËææ\nTAKARA/ÂÆùÊó•Âçá"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#pharmacogenomics",
    "href": "posts/useful_bio_links/index.html#pharmacogenomics",
    "title": "Bookmarks for Biologists",
    "section": "Pharmacogenomics",
    "text": "Pharmacogenomics\n\nPolyPhen-2: A tool for prediction of functional effects of human nsSNPs.\nPROVEAN: A database for prediction of protein functional changes.\nNCBI-dbSNP: A mutation database.\nPharmVar/Pharmacogene Variation Consortium: A database for drug-related genes.\nCPIC/Clinical Pharmacogenetics Implementation Consortium: A database for drug-related genes.\nPharmGKB: A database for drug-related genes."
  },
  {
    "objectID": "posts/useful_bio_links/index.html#drug-crystallization",
    "href": "posts/useful_bio_links/index.html#drug-crystallization",
    "title": "Bookmarks for Biologists",
    "section": "Drug Crystallization",
    "text": "Drug Crystallization\n\nXRPD/X-Ray Powder Diffraction\nBlog (CN): XRPD:Â∏ÉÊãâÊ†ºÂÆöÂæã\nDSC/Differential Scanning Calorimetry\nBlog (CN): ÁÉ≠ÈáçÂàÜÊûê"
  },
  {
    "objectID": "posts/useful_bio_links/index.html#databasetools-1",
    "href": "posts/useful_bio_links/index.html#databasetools-1",
    "title": "Bookmarks for Biologists",
    "section": "Database/Tools",
    "text": "Database/Tools\n\nÂõΩÂÆ∂Ê∞îË±°‰ø°ÊÅØ‰∏≠ÂøÉ-‰∏≠ÂõΩÊ∞îË±°Êï∞ÊçÆÁΩë\n‰∏≠ÂõΩÊ∞îË±°Â±ÄÂõΩÂÆ∂Ê∞îÂÄô‰∏≠ÂøÉ"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#molecular-cloning",
    "href": "posts/useful_bio_links/biolpages.html#molecular-cloning",
    "title": "Biology Websites Collection",
    "section": "Molecular Cloning",
    "text": "Molecular Cloning\n\nPlasmid Construction\n\nChoose Expression Vectors\nAAT Bioquest: Restriction Enzymes Cut Sizes Reference Table\nÂèåÈÖ∂Âàá\nËõãÁôΩÊ†áÁ≠æ_1\nËõãÁôΩÊ†áÁ≠æ_2\n3xHA Linker\nÂØÜÁ†ÅÂ≠ê‰ºòÂåñ\n‰øùÊä§Á¢±Âü∫_1\n‰øùÊä§Á¢±Âü∫_2\nPrimer Design_Addgene\nPrimer Design using Benchling\nÂºïÁâ©ËÆæËÆ°_Áü•‰πé\nUniversal Primers vs.¬†Degenerate Primers\n\n\n\nTransformation\n\nBL21-DE3 Competent Cell Transformation_NEB\nË¥®Á≤íÁöÑËΩ¨Âåñ\n\n\n\nDNA Extraction\n\nPlasmid Miniprep\nAlkaline Lysis\n\n\n\nGel Electrophoresis\n\nGuide of Analyzing Gel Electrophoresis Results\nCauses of Faint Bands in Gel Electrophoresis"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#protein-analysis",
    "href": "posts/useful_bio_links/biolpages.html#protein-analysis",
    "title": "Biology Websites Collection",
    "section": "Protein Analysis",
    "text": "Protein Analysis\n\nWestern Blot\n\nWestern Blot_Addgene\n\n\n\nQuantitative/Qualitative Assays\n\nAbsorption Spectroscopy\nNinhydrin Reaction Mechanism"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#sequencing",
    "href": "posts/useful_bio_links/biolpages.html#sequencing",
    "title": "Biology Websites Collection",
    "section": "Sequencing",
    "text": "Sequencing\n\nSanger Sequencing\n\nSequencing Chromatograms Interpretation\nDNA Barcoding: Promise and Pitfalls\n\n\n\nNGS/Next-Generation Sequencing\n\nMechanism\n\nGenomic Data Science_Coursera\nSpacer DNA\n\n\n\nAnalysis\n\nDADA2 Tutorial\nDADA2 ‰∏≠ÊñáÊïôÁ®ã\n16s RefSeq Records Processing and Curation\nBioinformatics_Coursera\nBioinformatic Methods I_Coursera\nAlgorithms for DNA Sequencing_Coursera\nphyloseq: R package for learning microbiome"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#quantitative-pcr",
    "href": "posts/useful_bio_links/biolpages.html#quantitative-pcr",
    "title": "Biology Websites Collection",
    "section": "Quantitative PCR",
    "text": "Quantitative PCR\n\nTechniques\n\nÊèêÂçáÊâ©Â¢ûÊïàÁéá_1\nÊèêÂçáÊâ©Â¢ûÊïàÁéá_2\n\n\n\nAnalysis\n\nAnalysis of qPCR Data\nPublish data with bar graph_ggplot2"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#crispr",
    "href": "posts/useful_bio_links/biolpages.html#crispr",
    "title": "Biology Websites Collection",
    "section": "CRISPR",
    "text": "CRISPR\n\nsgRNA Design\n\nGPP sgRNA Designer\nGenScript\n\n\n\nCRISPR Plasmids & Protocols\n\nAddgene CRISPR\nThermofisher\nSynthego"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#databasetools",
    "href": "posts/useful_bio_links/biolpages.html#databasetools",
    "title": "Biology Websites Collection",
    "section": "Database/Tools",
    "text": "Database/Tools\n\nNCBI BLAST/Basic Local Alignment Search Tool: A tool finding regions of similarity between biological sequences.\nAddgene: A database for plasmids and vectors.\nCARD/The Comprehensive Antibiotic Resistance Database: A database for ARGs/ARBs.\nRCSB PDB/Protein Data Bank: A database for protein structures.\nThe Jackson Laboratory: A database for mouse models.\nAlphaFold: A database/tool for protein structures predicted by AlphaFold.\nTALEN Designer: A TALEN vector designer.\nUCSF Chimera: A tool for protein 3D structure analysis.\nBenchling: A cloud-based platform for biotech R&D. Similar to SnapGene.\nSignalP: Predicts the presence and location of signal peptide cleavage sites in amino acid sequences from different organisms.\nBioconductor: A powerful R package for bioinformatics analysis.\nTimeTree: The Timescale of Life: A tool for phylogenetic analysis (for fun).\nMelting Temperature (Tm) Calculation\nPrimer Designing Tool"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#vendors",
    "href": "posts/useful_bio_links/biolpages.html#vendors",
    "title": "Biology Websites Collection",
    "section": "Vendors",
    "text": "Vendors\n\nGenewiz-Azenta/ÈáëÂîØÊô∫-ÂÆâÂçáËææ\nTAKARA/ÂÆùÊó•Âçá"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#pharmacogenomics",
    "href": "posts/useful_bio_links/biolpages.html#pharmacogenomics",
    "title": "Biology Websites Collection",
    "section": "Pharmacogenomics",
    "text": "Pharmacogenomics\n\nDatabases/Tools\n\nPolyPhen-2: A tool for prediction of functional effects of human nsSNPs.\nPROVEAN: A database for prediction of protein functional changes.\nNCBI-dbSNP: A mutation database.\nPharmVar/Pharmacogene Variation Consortium: A database for drug-related genes.\nCPIC/Clinical Pharmacogenetics Implementation Consortium: A database for drug-related genes.\nPharmGKB: A database for drug-related genes."
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#drug-crystallization",
    "href": "posts/useful_bio_links/biolpages.html#drug-crystallization",
    "title": "Biology Websites Collection",
    "section": "Drug Crystallization",
    "text": "Drug Crystallization\n\nMechanism\n\nXRPD/X-Ray Powder Diffraction\nXRPD:Â∏ÉÊãâÊ†ºÂÆöÂæã\nDSC/Differential Scanning Calorimetry\nÁÉ≠ÈáçÂàÜÊûê"
  },
  {
    "objectID": "posts/useful_bio_links/biolpages.html#databasetools-1",
    "href": "posts/useful_bio_links/biolpages.html#databasetools-1",
    "title": "Biology Websites Collection",
    "section": "Database/Tools",
    "text": "Database/Tools\n\nÂõΩÂÆ∂Ê∞îË±°‰ø°ÊÅØ‰∏≠ÂøÉ-‰∏≠ÂõΩÊ∞îË±°Êï∞ÊçÆÁΩë\n‰∏≠ÂõΩÊ∞îË±°Â±ÄÂõΩÂÆ∂Ê∞îÂÄô‰∏≠ÂøÉ"
  },
  {
    "objectID": "posts/useful_bio_links/index.html",
    "href": "posts/useful_bio_links/index.html",
    "title": "Bookmarks for Biologists",
    "section": "",
    "text": "NCBI BLAST/Basic Local Alignment Search Tool: Just BLAST.\nAddgene: A database for plasmids and vectors.\nCARD/The Comprehensive Antibiotic Resistance Database: A database for ARGs/ARBs.\nRCSB PDB/Protein Data Bank: A database for protein structures.\nThe Jackson Laboratory: A database for mouse models.\nAlphaFold: A database/tool for protein structures predicted by AlphaFold.\nTALEN Designer: A TALEN vector designer.\nUCSF Chimera: A tool for protein 3D structure analysis.\nBenchling: A cloud-based platform for biotech R&D. Similar to SnapGene.\nSignalP: Predicts the presence and location of signal peptide cleavage sites in amino acid sequences from different organisms.\nBioconductor: A powerful R package for bioinformatics analysis.\nTimeTree: The Timescale of Life: A tool for phylogenetic analysis (for fun).\nVitascientific.com: Melting Temperature (Tm) Calculation\nNCBI Primer Blast: Primer Designing Tool\nBioRender: A tool to make scientific graphs.\nÂõΩÂÆ∂Ê∞îË±°‰ø°ÊÅØ‰∏≠ÂøÉ-‰∏≠ÂõΩÊ∞îË±°Êï∞ÊçÆÁΩë\n‰∏≠ÂõΩÊ∞îË±°Â±ÄÂõΩÂÆ∂Ê∞îÂÄô‰∏≠ÂøÉ"
  },
  {
    "objectID": "aboutme.html#fun-facts-about-me",
    "href": "aboutme.html#fun-facts-about-me",
    "title": "About Me",
    "section": "",
    "text": "Outside of lab, I enjoy painting, reading, travelling, and listening and playing music.\nMy name Yunyi writes as ‰∫ëË°£ in Chinese - it comes from a poem by Li Bai, a poet my mom loves:\n\n‰∫ëÊÉ≥Ë°£Ë£≥Ëä±ÊÉ≥ÂÆπÔºåÊò•È£éÊãÇÊßõÈú≤ÂçéÊµì„ÄÇThe clouds resemble her dress, and the flowers mirror her beauty. In the spring breeze brushing against the balcony, the dewdrops gleam richly. (English Translation provided by ChatGPT)"
  },
  {
    "objectID": "aboutme.html#why-blogging",
    "href": "aboutme.html#why-blogging",
    "title": "About Me",
    "section": "",
    "text": "I made this blog to share things that I find useful and interesting regarding science, and hopefully you will also enjoy my contents.\n\n\nRecent Highlights\nI worked with my friend Juanyu to create an interactive dashboard which explores the relationship between environmental parameters and respiratory virus-associated hospitalization rates. Check it out!"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#here-comes-the-ride-fan",
    "href": "posts/lyric_analysis/index.html#here-comes-the-ride-fan",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Here Comes the Ride Fan",
    "text": "Here Comes the Ride Fan\n\n\n\n\n\n\nWarning\n\n\n\nThis is not a part of the 140.777 homework but I‚Äôm a huge fan of this band so I did this for my own good! Documentation to be added.\n\n\n\nData Wragling\n\n# assign lyricist\nandy_bell_songs &lt;- c(\"Drive Blind\", \"Close My Eyes\", \"Like A Daydream\",\n\"Silver\", \"Dreams Burn Down\", \"Here And Now\", \"Seagull\", \"Kaleidoscope\", \"In a Different Place\", \"Polar Bear\", \"Paralysed\", \"Vapour Trail\", \"Sennen\", \"Beneath\", \"Today\", \"Not Fazed\", \"Chrome Waves\", \"Time of Her Time\", \"Cool Your Boots\", \"Making Judy Smile\", \"Going Blank Again\", \"Howard Hughes\", \"Birdman\", \"Crown of Creation\", \"Endless Road\", \"Magical Spring\", \"I Don‚Äôt Know Where It Comes From\", \"Sunshine/Nowhere To Run\", \"Dead Man\", \"Walk on Water\", \"Mary Anne\", \"Castle On The Hill\", \"Gonna Be Alright\", \"The Dawn Patrol\", \"Ride The Wind\", \"Burnin‚Äô\", \"Starlight Motel\", \"Charm Assault\", \"Home Is A Feeling\", \"Weather Diaries\", \"Lateral Alice\", \"Cali\", \"Impermanence\",\"Cold Water People\", \"Catch You Dreaming\", \"Future Love\", \"Repetition\", \"Kill Switch\", \"Clouds of Saint Marie\", \"Fifteen Minutes\", \"Jump Jet\", \"Dial Up\", \"End Game\", \"In This Room\", \"Peace Sign\", \"Last Frontier\", \"Light in a Quiet Room\", \"Stay Free\", \"Last Night I Went Somewhere to Dream\", \"Midnight Rider\", \"Portland Rocks\", \"Yesterday Is Just a Song\")\n\nmark_gardener_songs &lt;- c(\"Chelsea Girl\", \"All I Can See\", \"Furthest Sense\", \"Perfect Time\", \"Taste\", \"Decay\", \"Unfamiliar\", \"Leave Them All Behind\", \"Twisterella\", \"Mouse Trap\", \"Time Machine\", \"OX4\", \"Stampede\", \"Moonlight Medicine\", \"1000 Miles\", \"From Time To Time\", \"Only Now\", \"Deep Inside My Pocket\", \"Lannoy Point\", \"White Sands\", \"Pulsar\", \"Keep It Surreal\", \"Shadows Behind the Sun\", \"Monaco\", \"I Came to See the Wreck\", \"Sunrise Chaser\", \"Essaouira\")\n\nloz_colbert_songs &lt;- c(\"Nowhere\", \"Natural Grace\", \"Rocket Silver Symphony\", \"R.I.D.E.\")\n\ncollab_songs &lt;- c(\"All I Want\", \"Eternal Recurrence\")\n\ncover_songs &lt;- c(\"How Does It Feel to Feel?\")\n\nlyrics_ride &lt;- lyrics_ride %&gt;%\n  mutate(\n    lyricist = case_when(\n      Song.Title %in% andy_bell_songs ~ \"Andy.Bell\",\n      Song.Title %in% mark_gardener_songs ~ \"Mark.Gardener\",\n      Song.Title %in% loz_colbert_songs ~ \"Loz.Colbert\",\n      Song.Title %in% collab_songs ~ \"collaboration\",\n      Song.Title %in% cover_songs ~ \"cover\",\n      TRUE ~ NA_character_\n    ),\n    Album = fct_reorder(Album, Release.Date), \n    is90 = Release.Year &lt; 2000\n  )\n\n# tokenize\n# tokenize by word\nride_token &lt;- lyrics_ride %&gt;%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# unique by song\nride_token_unique &lt;- ride_token %&gt;%\n  group_by(Song.Title) %&gt;%\n  distinct(Song.Title, Word, .keep_all = TRUE) %&gt;%\n  ungroup()\n\n# stopwords dropped\nride_token_clean &lt;- ride_token_unique %&gt;%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\n# count - lyricist, is90\nride_token_count &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;% \n  ungroup()\n\n# find top 15\nride_token_count_head_bylyricist &lt;- ride_token_count %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  filter(lyricist == 'Andy.Bell' | lyricist == 'Mark.Gardener') %&gt;%\n  slice(1:15) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n\n# who writes what\nggplot(lyrics_ride, aes(x = Album, fill = lyricist)) +\ngeom_bar() +\nscale_fill_brewer(palette = 'Set2') +\nscale_y_continuous(breaks = 1:12, minor_breaks = 1:12) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = 'Who writes the lyrics in each album?',\n    fill = 'lyricist',\n    y = 'percent', \n    x = 'album'\n  )\n\n\n\n\n\n\n\n\n\n# most frequent words\nggplot(ride_token_count_head_bylyricist, aes(x = Word_count, y = Word, fill = is90)) +\n  geom_col() +\n  facet_wrap( ~ lyricist) +\n  scale_fill_brewer(palette = 'Set2') +\n  scale_x_continuous(breaks = c(0, 5, 10, 15, 20, 25), minor_breaks = 1:25) +\n  labs(title = \"What's the most frequently used words for each lyricist\\nbefore/after reunion?\",\n    fill = 'Before Reunion',\n    y = 'Word', \n    x = 'Count'\n  )\n\n\n\n\n\n\n\n\n\n# The Word for each album?\nride_token_count_album &lt;- ride_token_clean %&gt;%\n  group_by(Album) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE)\n\n# find top 5\nride_token_count_album_head &lt;- ride_token_count_album %&gt;%\n  group_by(Album) %&gt;%\n  slice(1:5) %&gt;%\n  filter(!Word_count == 1) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_token_count_album_head, aes(x = Album, y = Word, label = Word)) +\n  geom_text(size = 3, aes(color = Word_count)) +\n  scale_color_continuous(high = '#0874c2', low = '#ccd8e0') +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = 'Top 5 Words for Each Album',\n    color = 'Count',\n    y = 'Word', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\n\n# who is more depressed\nride_token_count_aa &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\n# apply sentiment value\nride_token_afinn_aa &lt;- ride_token_count_aa %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\")) %&gt;% \n  filter(lyricist == 'Mark.Gardener' | lyricist == 'Andy.Bell' | lyricist == 'Loz.Colbert')\n\n# calculate overall score\nride_afinn_score_by_lyricist &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_afinn_score_by_lyricist, aes(x = lyricist, y = weighted_avg, fill = lyricist, label = weighted_avg)) +\n  geom_col() +\n  geom_text() +\n  scale_y_continuous(breaks = c(-2, -1, 0, 1, 2)) +\n  scale_fill_brewer(palette = 'Set2') +\n  labs(title = 'Who Is More Depressed: Overall',\n    y = 'Sentiment Score', \n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    x = 'Lyricist'\n  )\n\n\n\n\n\n\n\n\n\n# Is anyone getting more depressed over time?\n# Affin score for each person for each album\nride_afinn_score_by_lyricist_album &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2))\n\n`summarise()` has grouped output by 'lyricist', 'Album'. You can override using\nthe `.groups` argument.\n\n# geom_line()must work with numeric factor\nride_afinn_score_by_lyricist_album$Album_num &lt;- as.numeric(ride_afinn_score_by_lyricist_album$Album)\n\n# plotting\nggplot(ride_afinn_score_by_lyricist_album, \n       aes(x = Album_num, y = weighted_avg, color = lyricist, shape = lyricist, label = Album)) +\n  geom_point(size = 3) + \n  geom_line() +\n  scale_color_brewer(palette = 'Set2') +\n  scale_x_continuous(\n    breaks = ride_afinn_score_by_lyricist_album$Album_num,\n    labels = ride_afinn_score_by_lyricist_album$Album\n  ) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'lyricist',\n    y = 'Sentiment Score', \n    x = 'Album'\n  )"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#data-wrangling-1",
    "href": "posts/lyric_analysis/index.html#data-wrangling-1",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nInformation about lyric writers were from interviews and record sleeves.\n\n# assign lyricist\nandy_bell_songs &lt;- c(\"Drive Blind\", \"Close My Eyes\", \"Like A Daydream\", \"Silver\", \"Dreams Burn Down\", \"Here And Now\", \"Seagull\", \"Kaleidoscope\", \"In a Different Place\", \"Polar Bear\", \"Paralysed\", \"Vapour Trail\", \"Sennen\", \"Beneath\", \"Today\", \"Not Fazed\", \"Chrome Waves\", \"Time of Her Time\", \"Cool Your Boots\", \"Making Judy Smile\", \"Going Blank Again\", \"Howard Hughes\", \"Birdman\", \"Crown of Creation\", \"Endless Road\", \"Magical Spring\", \"I Don‚Äôt Know Where It Comes From\", \"Sunshine/Nowhere To Run\", \"Dead Man\", \"Walk on Water\", \"Mary Anne\", \"Castle On The Hill\", \"Gonna Be Alright\", \"The Dawn Patrol\", \"Ride The Wind\", \"Burnin‚Äô\", \"Starlight Motel\", \"Charm Assault\", \"Home Is A Feeling\", \"Weather Diaries\", \"Lateral Alice\", \"Cali\", \"Impermanence\",\"Cold Water People\", \"Catch You Dreaming\", \"Future Love\", \"Repetition\", \"Kill Switch\", \"Clouds of Saint Marie\", \"Fifteen Minutes\", \"Jump Jet\", \"Dial Up\", \"End Game\", \"In This Room\", \"Peace Sign\", \"Last Frontier\", \"Light in a Quiet Room\", \"Stay Free\", \"Last Night I Went Somewhere to Dream\", \"Midnight Rider\", \"Portland Rocks\", \"Yesterday Is Just a Song\")\n\nmark_gardener_songs &lt;- c(\"Chelsea Girl\", \"All I Can See\", \"Furthest Sense\", \"Perfect Time\", \"Taste\", \"Decay\", \"Unfamiliar\", \"Leave Them All Behind\", \"Twisterella\", \"Mouse Trap\", \"Time Machine\", \"OX4\", \"Stampede\", \"Moonlight Medicine\", \"1000 Miles\", \"From Time To Time\", \"Only Now\", \"Deep Inside My Pocket\", \"Lannoy Point\", \"White Sands\", \"Pulsar\", \"Keep It Surreal\", \"Shadows Behind the Sun\", \"Monaco\", \"I Came to See the Wreck\", \"Sunrise Chaser\", \"Essaouira\")\n\nloz_colbert_songs &lt;- c(\"Nowhere\", \"Natural Grace\", \"Rocket Silver Symphony\", \"R.I.D.E.\")\n\ncollab_songs &lt;- c(\"All I Want\", \"Eternal Recurrence\")\n\ncover_songs &lt;- c(\"How Does It Feel to Feel?\")\n\nlyrics_ride &lt;- lyrics_ride %&gt;%\n  mutate(lyricist = case_when(\n         Song.Title %in% andy_bell_songs ~ \"Andy.Bell\",\n         Song.Title %in% mark_gardener_songs ~ \"Mark.Gardener\",\n         Song.Title %in% loz_colbert_songs ~ \"Loz.Colbert\",\n         Song.Title %in% collab_songs ~ \"collaboration\",\n         Song.Title %in% cover_songs ~ \"cover\",\n         TRUE ~ NA_character_\n         ),\n         Album = fct_reorder(Album, Release.Date),\n         is90 = Release.Year &lt; 2000)"
  },
  {
    "objectID": "posts/lyric_analysis/index.html#data-analysis-1",
    "href": "posts/lyric_analysis/index.html#data-analysis-1",
    "title": "Example Analysis: Who is the saddest shoegaze band?",
    "section": "Data Analysis",
    "text": "Data Analysis\n\n# tokenize\n# tokenize by word\nride_token &lt;- lyrics_ride %&gt;%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# unique by song\nride_token_unique &lt;- ride_token %&gt;%\n  group_by(Song.Title) %&gt;%\n  distinct(Song.Title, Word, .keep_all = TRUE) %&gt;%\n  ungroup()\n\n# stopwords dropped\nride_token_clean &lt;- ride_token_unique %&gt;%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\n\nWho writes the lyrics in each album?\n\n# who writes what\nggplot(lyrics_ride, aes(x = Album, fill = lyricist)) +\ngeom_bar() +\nscale_fill_manual(values = ride_palette) +\nscale_y_continuous(breaks = 1:12, minor_breaks = 1:12) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = 'Who writes the lyrics in each album?',\n    fill = 'Lyricist',\n    y = 'Count', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\n\n\nWhat‚Äôs the most frequently used words for each lyricist before/after reunion?\n\n# count - lyricist, is90\nride_token_count &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;% \n  ungroup()\n\n# find top 15\nride_token_count_head_bylyricist &lt;- ride_token_count %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  filter(lyricist == 'Andy.Bell' | lyricist == 'Mark.Gardener') %&gt;%\n  slice(1:15) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n# most frequent words\nggplot(ride_token_count_head_bylyricist, aes(x = Word_count, y = Word, fill = is90)) +\n  geom_col() +\n  facet_wrap( ~ lyricist) +\n  scale_fill_manual(values = ride_palette, name = 'Status', labels = c('After Reunion', 'Before Reunion')) +\n  scale_x_continuous(breaks = c(0, 5, 10, 15, 20, 25), minor_breaks = 1:25) +\n  labs(title = \"What's the most frequently used words for each lyricist\\nbefore/after reunion?\",\n    fill = 'Before Reunion',\n    caption = 'Only top 15 frequently used words were shown.',\n    y = 'Word', \n    x = 'Count'\n  )\n\n\n\n\n\n\n\n\n\n\nTop 5 Words for Each Album\n\n# The Word for each album?\nride_token_count_album &lt;- ride_token_clean %&gt;%\n  group_by(Album) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE)\n\n# find top 5\nride_token_count_album_head &lt;- ride_token_count_album %&gt;%\n  group_by(Album) %&gt;%\n  slice(1:5) %&gt;%\n  filter(!Word_count == 1) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_token_count_album_head, aes(x = Album, y = Word, label = Word)) +\n  geom_text(size = 3, aes(color = Word_count)) +\n  scale_color_continuous(high = '#a688b9', low = '#ccd8e0') +\n  coord_fixed(ratio = 0.3) + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = 'Top 5 Words for Each Album',\n    color = 'Count',\n    y = 'Word', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\n\n\nWho is the Saddest Lyricist?\n\n# who is more depressed\nride_token_count_aa &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\n# apply sentiment value\nride_token_afinn_aa &lt;- ride_token_count_aa %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\")) %&gt;% \n  filter(lyricist == 'Mark.Gardener' | lyricist == 'Andy.Bell' | lyricist == 'Loz.Colbert')\n\n# calculate overall score\nride_afinn_score_by_lyricist &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_afinn_score_by_lyricist, aes(x = lyricist, y = weighted_avg, fill = lyricist, label = weighted_avg)) +\n  geom_col() +\n  geom_text() +\n  scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1.5,1.5)) +\n  scale_fill_manual(values = ride_palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(title = 'Who is the Saddest Lyricist?',\n    y = 'Sentiment Score', \n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    x = 'Lyricist',\n    fill = 'Lyricist'\n  )\n\n\n\n\n\n\n\n\n\n\nAre they trending towards happiness or sadness over time?\n\n# Is anyone getting more depressed over time?\n# assign affin score for each person for each album\nride_afinn_score_by_lyricist_album &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2))\n\n# geom_line() must work with numeric factor\nride_afinn_score_by_lyricist_album$Album_num &lt;- as.numeric(ride_afinn_score_by_lyricist_album$Album)\n\n# plotting\nggplot(ride_afinn_score_by_lyricist_album, \n       aes(x = Album_num, y = weighted_avg, color = lyricist, shape = lyricist, label = Album)) +\n  geom_point(size = 3) + \n  geom_line() +\n  scale_color_manual(values = ride_palette) +\n  scale_x_continuous(\n    breaks = ride_afinn_score_by_lyricist_album$Album_num,\n    labels = ride_afinn_score_by_lyricist_album$Album\n  ) +\n  scale_y_continuous(limits = c(-2,2)) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'lyricist',\n    y = 'Sentiment Score', \n    x = 'Album'\n  )"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Yunyi's Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nAll About Birding\n\n\n\n\n\n\nfun\n\n\nbirding\n\n\n\n\n\n\n\n\n\nJan 8, 2025\n\n\n32 min\n\n\n\n\n\n\n\n[Dashboard] Weather-Respiratory Disease Correlation Explorer\n\n\n\n\n\n\ndata analysis\n\n\nrespiratory virus\n\n\ndashboard\n\n\nR\n\n\nR Shiny\n\n\n\n\n\n\n\n\n\nDec 19, 2024\n\n\n2 min\n\n\n\n\n\n\n\n[Data Analysis] Who is the saddest shoegaze band?\n\n\n\n\n\n\nfun\n\n\ndata analysis\n\n\ntext analysis\n\n\nsentiment analysis\n\n\nR\n\n\n\n\n\n\n\n\n\nNov 8, 2024\n\n\n18 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/lyric_analysis/index.html",
    "href": "projects/lyric_analysis/index.html",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "",
    "text": "I‚Äôm interested in the ‚Äòshoegaze‚Äô subgenre of indie rock. This less-known genre, also called ‚Äòthe scene that celebrates itself‚Äô, rose from the noise pop scene in the late 80s and early 90s, and has regained popularity recently. An article titled ‚ÄòThe Shoegaze Revival Hit Its Stride in 2023‚Äô (Sherburne 2023) by pitchfork also captures the revival of shoegaze among GenZ populations.\n\n\n\n\n\nMy bloody valentine‚Äôs 1988 EP ‚ÄòYou made me realise‚Äô is a classic shoegaze record.\n\n\nShoegaze is characterized by heavy use of overdriven guitar and various effect pedals with the combination of the ethereal vocals; the lyrics are often regarded as blank, poetic, and sometimes difficult to distinguish from the instruments. So here comes this project for the indieheads - I want to analyze those usually overlooked lyrics, especially from the perspective of sentiment.\nThe bands I want to study are the so-called classic ‚Äòbig-three‚Äô of shoegaze: my bloody valentine, Ride, and slowdive. They were all on the independent record label Creation from London, UK, reached their peak in early 90s, disbanded in late 90s due to the fading of the subgenre, and reunited in the 21st century, which make them a perfect fit to study the changes in the lyrics over the years.\n\n\n\n\nWhat words frequently appear in their lyrics?\nWhich bands have the longest and shortest lyrics?\nWho is the saddest shoegaze band?\nAre bands trending towards happiness or sadness over time?"
  },
  {
    "objectID": "projects/lyric_analysis/index.html#why-this-project",
    "href": "projects/lyric_analysis/index.html#why-this-project",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "",
    "text": "I‚Äôm interested in the ‚Äòshoegaze‚Äô subgenre of indie rock. This less-known genre, also called ‚Äòthe scene that celebrates itself‚Äô, rose from the noise pop scene in the late 80s and early 90s, and has regained popularity recently. An article titled ‚ÄòThe Shoegaze Revival Hit Its Stride in 2023‚Äô (Sherburne 2023) by pitchfork also captures the revival of shoegaze among GenZ populations.\n\n\n\n\n\nMy bloody valentine‚Äôs 1988 EP ‚ÄòYou made me realise‚Äô is a classic shoegaze record.\n\n\nShoegaze is characterized by heavy use of overdriven guitar and various effect pedals with the combination of the ethereal vocals; the lyrics are often regarded as blank, poetic, and sometimes difficult to distinguish from the instruments. So here comes this project for the indieheads - I want to analyze those usually overlooked lyrics, especially from the perspective of sentiment.\nThe bands I want to study are the so-called classic ‚Äòbig-three‚Äô of shoegaze: my bloody valentine, Ride, and slowdive. They were all on the independent record label Creation from London, UK, reached their peak in early 90s, disbanded in late 90s due to the fading of the subgenre, and reunited in the 21st century, which make them a perfect fit to study the changes in the lyrics over the years."
  },
  {
    "objectID": "projects/lyric_analysis/index.html#my-questions",
    "href": "projects/lyric_analysis/index.html#my-questions",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "",
    "text": "What words frequently appear in their lyrics?\nWhich bands have the longest and shortest lyrics?\nWho is the saddest shoegaze band?\nAre bands trending towards happiness or sadness over time?"
  },
  {
    "objectID": "projects/lyric_analysis/index.html#data-acquisition-wragling",
    "href": "projects/lyric_analysis/index.html#data-acquisition-wragling",
    "title": "[Data Analysis Project] Who is the saddest shoegaze band?",
    "section": "Data Acquisition & Wragling",
    "text": "Data Acquisition & Wragling\n\n\n  \n\nData Acquisition\nLyrics from all studio albums of the ‚Äòbig three‚Äô bands in the shoegaze genre - my bloody valentine (mbv), Ride, and slowdive - are retrieved from Genius.com using a Python package named lyricsgenius (Miller 2024) based on Genius API. Please see the author‚Äôs instructions for details.\n\n\n\n\n\n\nThe downloaded .json files were written into a .csv file for further processing. Please go to the source repository for more details.\n\n\n\n\n# load packages\nlibrary('stringi')\nlibrary('tidyverse')\nlibrary('lubridate')\nlibrary('knitr')\n\n# reference\nknitr::write_bib(\"rmarkdown\", file = \"my-refs.bib\")\n\n# import data\nlyrics &lt;- read.csv(\"data/lyrics_data.csv\")\nkable(head(lyrics, n = 1))\n\n\n\n\n\n\n\n\n\n\n\n\nTrack.Number\nSong.Title\nArtist\nRelease.Date\nLyrics\nAlbum.Name\n\n\n\n\n1\nSoft as Snow (But Warm Inside)\nmy bloody valentine\n21-Nov-88\n21 ContributorsSoft as Snow (But Warm Inside) Lyrics Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, ‚ÄúYou‚Äù Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they‚Äôre undressing me (Ooh, ooh) Come inside, it‚Äôs warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can‚Äôt see Bring me close to ecstasy High away to heaven, and I‚Äôm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you‚Äôre exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh) You might also like Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh1Embed\nIsn‚Äôt Anything\n\n\n\n\n\n\n\nData Dictionary\n\n\n\n\n\n\n\n\nField Name\nData Type\nDescription\n\n\n\n\nTrack.Number\nInteger\nThe track number of the song in the album\n\n\nSong.Title\nString\nThe title of the song\n\n\nArtist\nString\nThe artist performing the song\n\n\nRelease.Date\nString\nThe date the song was released\n\n\nLyrics\nString\nThe lyrics of the song\n\n\nAlbum.Name\nString\nThe name of the album the song belongs to\n\n\n\n\n\nData Wrangling\nThe lyrics directly retrieved from Genius.com usually have some problems -\n\n\n\n\n\n\n\n‚Äò16 ContributorsBallad of Sister Sue Lyrics‚Äô at the beginning and ‚Äò6Embed‚Äô at the end are not part of the lyrics.\n‚Äò‚àö¬¢¬¨√Ñ¬¨√¥‚Äô - some problem with Unicode encoding/decoding.\n‚ÄòSee Slowdive LiveGet tickets as low as $55‚Äô - ads is also not part of the lyrics.\n\n\n\n\nSo, it requires some data cleaning.\n\n# clean text\nlyrics_clean &lt;- lyrics %&gt;%\n  mutate(Lyrics = stri_enc_toutf8(Lyrics)) %&gt;%\n  mutate(Lyrics = str_replace_all(Lyrics, '√¢\\u0080\\u0099', \"'\")) %&gt;%\n  mutate(\n    Lyrics = Lyrics %&gt;%\n      str_remove(\".*Lyrics\") %&gt;%\n      str_remove(\"See.*tickets as low as \\\\$\\\\d+\") %&gt;%\n      str_remove('You might also like') %&gt;%\n      str_remove('\\\\d*\\\\s*Embed$') %&gt;%\n      str_trim()\n  ) %&gt;%\n  rename(Album = Album.Name) %&gt;%\n  filter(!str_detect(Lyrics, \"^\\\\s*$\")) # filter out instrumental pieces\n\n# add some factors for further processing\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  mutate(lyric.length = nchar(Lyrics),\n         Release.Date = dmy(Release.Date),\n         Release.Year = year(Release.Date))\n\nprint(lyrics_clean[1,'Lyrics'])\n\n[1] \"Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, \\\"You\\\" Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they're undressing me (Ooh, ooh) Come inside, it's warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can't see Bring me close to ecstasy High away to heaven, and I'm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you're exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh)  Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh\"\n\n# this is for ride-only analysis\nlyrics_ride &lt;- lyrics_clean %&gt;%\n  filter(Artist == 'Ride')\n\n# this keeps the dataset working for the original analysis\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  filter(!str_detect(Album, \"\\\\[EP\\\\]\")) %&gt;%\n  mutate(Album = factor(Album, \n                        levels = c(\"Isn‚Äôt Anything\", \"loveless\", \"m b v\", \n                                   \"Nowhere\", \"Going Blank Again\", \"Carnival of Light\", \"Tarantula\", \"Weather Diaries\", \"This Is Not a Safe Place\", \"Interplay\", \n                                   \"Just for a Day\", \"Souvlaki\", \"Pygmalion\", \"Slowdive\", \"‚Äã‚Äã‚Äãeverything is alive\")))"
  },
  {
    "objectID": "projects/lyric_analysis/index.html#data-analysis",
    "href": "projects/lyric_analysis/index.html#data-analysis",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "Data Analysis",
    "text": "Data Analysis\n\nWhat words frequently appear in their lyrics?\n\nlibrary('tidytext')\n\n# tokenize by word\ntoken &lt;- lyrics_clean %&gt;%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# stopwords dropped\ntoken_clean &lt;- token %&gt;%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\ntoken_count_cloud &lt;- token_clean %&gt;%\n  group_by(Artist) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE)\n\ntoken_count_head &lt;- token_count_cloud %&gt;%\n  group_by(Artist) %&gt;%\n  slice(1:30) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE))\n\n# make a word cloud\nlibrary(ggplot2)\ntheme_set(theme_bw())\nlibrary(ggwordcloud)\npalette &lt;- c(\n  \"my bloody valentine\" = \"#d83c7a\",\n  \"Ride\" = \"#4b8ab8\",\n  \"Slowdive\" = \"#ae8f32\",\n  \"when you sleep\" = \"#f576a8\",\n  \"Vapour Trail\" = \"#56a8e3\",\n  \"When the Sun Hits\" = \"#d1b971\"\n  )\n\nggplot(token_count_head, aes(\n  label = Word,\n  size = Word_count,\n  color = Artist\n)) +\n  geom_text_wordcloud(word.ratio = 0.2, # adjust for overall word size\n                      max_size = 30) +\n  facet_wrap(~ Artist) +\n  scale_color_manual(values = palette) +\n  labs(\n    title = 'Most Frequently Used Words in Lyrics',\n    caption = 'Word size based on frequency. Only the top 30 results are shown here.'\n  )\n\n\n\n\n\n\n\n\nThe result is kind of amusing. Ride and mbv rely their vocals heavily on harmonies and hummings - and it‚Äôs reflected honestly here, while slowdive has the most ‚Äòmeaningful‚Äô lyrics among the three. ‚ÄòLove‚Äô is the ultimate meaning of rock and roll, and it indeed appears in high frequency in all of their lyrics.\n\n\nWhich bands have the longest and shortest lyrics?\n\n# plotting\nggplot(lyrics_clean, aes(x = Album, y = lyric.length, fill = Artist)) + \n  geom_boxplot(color = 'black') +\n  scale_fill_manual(values = palette) +\n  labs(\n    title = 'Which bands have the Longest/Shortest Lyrics?',\n    caption = 'Boxplot showing the range and median of lyric lengths for each Album.', \n    color = 'Before Reunion?', \n    y = 'Lyric Length (character)'\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAmong the three bands, Mbv always has the shortest lyrics overall while Ride has the longest. An interesting trend is that while Ride and slowdive have similar lyric length back in the 90s, after reunion, Ride tends to have longer lyrics - and the length increases for each album.\n\n\nWho is the saddest shoegaze band?\nI used afinn from package tidytext for sentiment analysis based on this paper(Koto and Adriani 2015).\n\n# data processing: sentiment 'afinn'\ntoken_count &lt;- token_clean %&gt;%\n  group_by(Artist, Album, Release.Year) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\ntoken_afinn &lt;- token_count %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\nafinn_score_by_artist &lt;- token_afinn %&gt;%\n  group_by(Artist) %&gt;%\n  summarize(avg = round(mean(value), 2)) %&gt;%\n  ungroup()\n\nkable(afinn_score_by_artist)\n\n\n\n\nArtist\navg\n\n\n\n\nRide\n-0.06\n\n\nSlowdive\n0.00\n\n\nmy bloody valentine\n-0.11\n\n\n\n\n\nAmong the three bands, mbv has the lowest sentiment score, which means it is the saddest shoegaze band (if we only look at the lyrics). All three bands got sentiment scores less than or equal to zero, with slowdive holding the highest score (0.00).\n\nWhat about their greatest hits?\nUsing data from last.fm, we find out that the greatest hits of the three bands are:\n\nwhen you sleep - my bloody valentine (32171 weekly listeners),\nVapour Trail - Ride (1943 weekly listeners), and\nWhen the Sun Hits - Slowdive (53055 weekly listeners).\n\nI‚Äôm interested that whether those songs have a happier or sadder vibe compared to their other songs -\n\n# by song\ntoken_count_bysong &lt;- token_clean %&gt;%\n  group_by(Artist, Song.Title) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\n# give afinn score\ntoken_afinn_bysong &lt;- token_count_bysong %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\"))\n\n# clean data set, drop songs with only 1/2 rows\ntoken_afinn_bysong &lt;- token_afinn_bysong %&gt;%\n  group_by(Song.Title) %&gt;%\n  filter(n() &gt; 2) %&gt;%\n  ungroup()\n\n# calculate average scores\nafinn_score_all &lt;- token_afinn_bysong %&gt;%\n  group_by(Song.Title, Artist) %&gt;%\n  summarize(avg_song = mean(value))\n\n# look at the greatest hits\nafinn_score_gh &lt;- afinn_score_all %&gt;%\n  filter(Song.Title == 'Vapour Trail' | Song.Title == 'When the Sun Hits' | Song.Title == 'when you sleep')\n\n# combine datasets for plotting\nafinn_score_gh &lt;- inner_join(afinn_score_gh, afinn_score_by_artist, by = c(\"Artist\" = \"Artist\"))\n\n# plot\nggplot(afinn_score_gh, aes(x = Artist)) +\n  geom_point(shape = 16, size = 3, aes(y = afinn_score_gh$avg, color = Artist)) +\n  geom_point(shape = 17, size = 3, aes(y = afinn_score_gh$avg_song, color = \nSong.Title)) +\n  scale_color_manual(values = palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(\n    title = 'Who is the Saddest Shoegaze Band?',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.', \n    y = 'Sentiment Score', \n    x = 'Time', \n    color = 'Artist average/\\ngreatest hits'\n  )\n\n\n\n\n\n\n\n\nMbv has the lowest overall sentiment score. All those songs have a slightly higher sentiment score than their artist‚Äôs average scores. People seem to prefer happy songs!\n\n\nSo what are their happiest/saddest songs?\n\nextreme_song &lt;- afinn_score_all %&gt;%\n  group_by(Artist) %&gt;%\n  filter(avg_song == max(avg_song) | avg_song == min(avg_song)) %&gt;%\n  ungroup()\n\nsorted_tibble &lt;- extreme_song %&gt;%\n  group_by(Artist) %&gt;%\n  arrange(Artist, avg_song) %&gt;%\n  ungroup()\n\nkable(sorted_tibble)\n\n\n\n\nSong.Title\nArtist\navg_song\n\n\n\n\nI Came to See the Wreck\nRide\n-1.500000\n\n\nOnly Now\nRide\n-1.500000\n\n\nThe Dawn Patrol\nRide\n2.000000\n\n\nThe Sadman\nSlowdive\n-2.333333\n\n\nEveryone Knows\nSlowdive\n3.000000\n\n\nif i am\nmy bloody valentine\n-1.400000\n\n\nonly shallow\nmy bloody valentine\n2.000000\n\n\n\n\n\nWith the table above, we find that Ride‚Äôs saddest songs are ‚ÄòI Came to See the Wreck‚Äô and ‚ÄòOnly Now‚Äô, and happiest songs is ‚ÄòThe Dawn Patrol‚Äô; Slowdive‚Äôs saddest song is ‚ÄòThe Sadman‚Äô, and happiest songs is ‚ÄòEveryone Knows‚Äô; mbv‚Äôs saddest song is ‚Äòif i am‚Äô, and happiest song is ‚Äòonly shallow‚Äô. The Sadman is really sad.\n\n\n\nAre bands trending towards happiness or sadness over time?\n\nafinn_score &lt;- token_afinn %&gt;%\n  group_by(Artist, Album, Release.Year) %&gt;%\n  summarize(avg = mean(value))\n\nlibrary(ggrepel)\nggplot(afinn_score,\n       aes(x = Release.Year, y = avg, color = Artist, label = Album)) +\n  geom_point() +\n  geom_line() +\n  geom_text_repel(size = 3) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  scale_color_manual(values = palette) +\n  scale_y_continuous(limits = c(-1,1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'Artist',\n    y = 'Sentiment Score', \n    x = 'Time'\n  )\n\n\n\n\n\n\n\n\nWhen examining the trend over time, it is noteworthy that at the beginning of their careers, the bands all had very sad lyrics; in the middle of their careers, their lyrics became more positive. It is also interesting to observe that the latest albums of mbv, Ride, and Slowdive are all among the saddest of their entire careers."
  },
  {
    "objectID": "projects/lyric_analysis/index.html#data-wrangling-1",
    "href": "projects/lyric_analysis/index.html#data-wrangling-1",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nInformation about lyric writers were from interviews and record sleeves.\n\n# assign lyricist\nandy_bell_songs &lt;- c(\"Drive Blind\", \"Close My Eyes\", \"Like A Daydream\", \"Silver\", \"Dreams Burn Down\", \"Here And Now\", \"Seagull\", \"Kaleidoscope\", \"In a Different Place\", \"Polar Bear\", \"Paralysed\", \"Vapour Trail\", \"Sennen\", \"Beneath\", \"Today\", \"Not Fazed\", \"Chrome Waves\", \"Time of Her Time\", \"Cool Your Boots\", \"Making Judy Smile\", \"Going Blank Again\", \"Howard Hughes\", \"Birdman\", \"Crown of Creation\", \"Endless Road\", \"Magical Spring\", \"I Don‚Äôt Know Where It Comes From\", \"Sunshine/Nowhere To Run\", \"Dead Man\", \"Walk on Water\", \"Mary Anne\", \"Castle On The Hill\", \"Gonna Be Alright\", \"The Dawn Patrol\", \"Ride The Wind\", \"Burnin‚Äô\", \"Starlight Motel\", \"Charm Assault\", \"Home Is A Feeling\", \"Weather Diaries\", \"Lateral Alice\", \"Cali\", \"Impermanence\",\"Cold Water People\", \"Catch You Dreaming\", \"Future Love\", \"Repetition\", \"Kill Switch\", \"Clouds of Saint Marie\", \"Fifteen Minutes\", \"Jump Jet\", \"Dial Up\", \"End Game\", \"In This Room\", \"Peace Sign\", \"Last Frontier\", \"Light in a Quiet Room\", \"Stay Free\", \"Last Night I Went Somewhere to Dream\", \"Midnight Rider\", \"Portland Rocks\", \"Yesterday Is Just a Song\")\n\nmark_gardener_songs &lt;- c(\"Chelsea Girl\", \"All I Can See\", \"Furthest Sense\", \"Perfect Time\", \"Taste\", \"Decay\", \"Unfamiliar\", \"Leave Them All Behind\", \"Twisterella\", \"Mouse Trap\", \"Time Machine\", \"OX4\", \"Stampede\", \"Moonlight Medicine\", \"1000 Miles\", \"From Time To Time\", \"Only Now\", \"Deep Inside My Pocket\", \"Lannoy Point\", \"White Sands\", \"Pulsar\", \"Keep It Surreal\", \"Shadows Behind the Sun\", \"Monaco\", \"I Came to See the Wreck\", \"Sunrise Chaser\", \"Essaouira\")\n\nloz_colbert_songs &lt;- c(\"Nowhere\", \"Natural Grace\", \"Rocket Silver Symphony\", \"R.I.D.E.\")\n\ncollab_songs &lt;- c(\"All I Want\", \"Eternal Recurrence\")\n\ncover_songs &lt;- c(\"How Does It Feel to Feel?\")\n\nlyrics_ride &lt;- lyrics_ride %&gt;%\n  mutate(lyricist = case_when(\n         Song.Title %in% andy_bell_songs ~ \"Andy.Bell\",\n         Song.Title %in% mark_gardener_songs ~ \"Mark.Gardener\",\n         Song.Title %in% loz_colbert_songs ~ \"Loz.Colbert\",\n         Song.Title %in% collab_songs ~ \"collaboration\",\n         Song.Title %in% cover_songs ~ \"cover\",\n         TRUE ~ NA_character_\n         ),\n         Album = fct_reorder(Album, Release.Date),\n         is90 = Release.Year &lt; 2000)"
  },
  {
    "objectID": "projects/lyric_analysis/index.html#data-analysis-1",
    "href": "projects/lyric_analysis/index.html#data-analysis-1",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "Data Analysis",
    "text": "Data Analysis\n\n# tokenize\n# tokenize by word\nride_token &lt;- lyrics_ride %&gt;%\n  unnest_tokens(output = Word,\n                input = Lyrics,\n                token = 'words')\n\n# unique by song\nride_token_unique &lt;- ride_token %&gt;%\n  group_by(Song.Title) %&gt;%\n  distinct(Song.Title, Word, .keep_all = TRUE) %&gt;%\n  ungroup()\n\n# stopwords dropped\nride_token_clean &lt;- ride_token_unique %&gt;%\n  anti_join(stop_words, by = c(\"Word\" = \"word\"))\n\n\nWho writes the lyrics in each album?\n\n# who writes what\nggplot(lyrics_ride, aes(x = Album, fill = lyricist)) +\ngeom_bar() +\nscale_fill_manual(values = ride_palette) +\nscale_y_continuous(breaks = 1:12, minor_breaks = 1:12) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = 'Who writes the lyrics in each album?',\n    fill = 'Lyricist',\n    y = 'Count', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\nAndy Bell did a lot, especially for Nowhere, Tarantula, and This is Not a Safe Place.\n\n\nWhat‚Äôs the most frequently used words for each lyricist before/after reunion?\n\n# count - lyricist, is90\nride_token_count &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;% \n  ungroup()\n\n# find top 15\nride_token_count_head_bylyricist &lt;- ride_token_count %&gt;%\n  group_by(lyricist, is90) %&gt;%\n  filter(lyricist == 'Andy.Bell' | lyricist == 'Mark.Gardener') %&gt;%\n  slice(1:15) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n# most frequent words\nggplot(ride_token_count_head_bylyricist, aes(x = Word_count, y = Word, fill = is90)) +\n  geom_col() +\n  facet_wrap( ~ lyricist) +\n  scale_fill_manual(values = ride_palette, name = 'Status', labels = c('After Reunion', 'Before Reunion')) +\n  scale_x_continuous(breaks = c(0, 5, 10, 15, 20, 25), minor_breaks = 1:25) +\n  labs(title = \"What's the most frequently used words for each lyricist\\nbefore/after reunion?\",\n    fill = 'Before Reunion',\n    caption = 'Only top 15 frequently used words were shown.',\n    y = 'Word', \n    x = 'Count'\n  )\n\n\n\n\n\n\n\n\nIt‚Äôs surprising that ‚Äòtime‚Äô was used a lot. I‚Äôm interested that whether all bands like this word or it‚Äôs just RIDE. Maybe it would be my next project in the future.\n\n\nTop 5 Words for Each Album\n\n# The Word for each album?\nride_token_count_album &lt;- ride_token_clean %&gt;%\n  group_by(Album) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE)\n\n# find top 5\nride_token_count_album_head &lt;- ride_token_count_album %&gt;%\n  group_by(Album) %&gt;%\n  slice(1:5) %&gt;%\n  filter(!Word_count == 1) %&gt;%\n  mutate(Word = fct_reorder(Word, Word_count, .desc = FALSE)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_token_count_album_head, aes(x = Album, y = Word, label = Word)) +\n  geom_text(size = 3, aes(color = Word_count)) +\n  scale_color_continuous(high = '#a688b9', low = '#ccd8e0') +\n  coord_fixed(ratio = 0.3) + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = 'Top 5 Words for Each Album',\n    color = 'Count',\n    y = 'Word', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\nSome themes are always there - time, day, life, feel‚Ä¶\n\n\nWho is the Saddest Lyricist?\n\n# who is more depressed\nride_token_count_aa &lt;- ride_token_clean %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  count(Word, name = 'Word_count', sort = TRUE) %&gt;%\n  ungroup()\n\n# apply sentiment value\nride_token_afinn_aa &lt;- ride_token_count_aa %&gt;%\n  inner_join(get_sentiments('afinn'), by = c(\"Word\" = \"word\")) %&gt;% \n  filter(lyricist == 'Mark.Gardener' | lyricist == 'Andy.Bell' | lyricist == 'Loz.Colbert')\n\n# calculate overall score\nride_afinn_score_by_lyricist &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2)) %&gt;%\n  ungroup()\n\n# plotting\nggplot(ride_afinn_score_by_lyricist, aes(x = lyricist, y = weighted_avg, fill = lyricist, label = weighted_avg)) +\n  geom_col() +\n  geom_text() +\n  scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1.5,1.5)) +\n  scale_fill_manual(values = ride_palette) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  labs(title = 'Who is the Saddest Lyricist?',\n    y = 'Sentiment Score', \n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    x = 'Lyricist',\n    fill = 'Lyricist'\n  )\n\n\n\n\n\n\n\n\nMark Gardener seems really sad.\n\n\nAre they trending towards happiness or sadness over time?\n\n# Is anyone getting more depressed over time?\n# assign affin score for each person for each album\nride_afinn_score_by_lyricist_album &lt;- ride_token_afinn_aa %&gt;%\n  group_by(lyricist, Album, Release.Date) %&gt;%\n  summarize(weighted_avg = round(sum(value * Word_count) / sum(Word_count),2))\n\n# geom_line() must work with numeric factor\nride_afinn_score_by_lyricist_album$Album_num &lt;- as.numeric(ride_afinn_score_by_lyricist_album$Album)\n\n# plotting\nggplot(ride_afinn_score_by_lyricist_album, \n       aes(x = Album_num, y = weighted_avg, color = lyricist, shape = lyricist, label = Album)) +\n  geom_point(size = 3) + \n  geom_line() +\n  scale_color_manual(values = ride_palette) +\n  scale_x_continuous(\n    breaks = ride_afinn_score_by_lyricist_album$Album_num,\n    labels = ride_afinn_score_by_lyricist_album$Album\n  ) +\n  scale_y_continuous(limits = c(-2,2)) +\n  geom_hline(yintercept = 0, linetype = 'dashed', color = 'black') +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title = 'Sentiment Trend of Lyrics Over Time',\n    caption = 'Average sentiment score calculated based on afinn scores.\\n&lt;0: sad/negative, &gt;0: happy/positive.',\n    color = 'lyricist',\n    y = 'Sentiment Score', \n    x = 'Album'\n  )\n\n\n\n\n\n\n\n\nAre people getting sadder when they get old?\n\nThis is a class project of Johns Hopkins University Biostatistics 140.777 Statistical Programming Paradigms course."
  },
  {
    "objectID": "projects/lyric_analysis/index.html#my-questions-1",
    "href": "projects/lyric_analysis/index.html#my-questions-1",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "My Questions",
    "text": "My Questions\n\nWho writes the lyrics in each album?\nWhat‚Äôs the most frequently used words for each lyricist before/after reunion?\nTop 5 Words for Each Album\nWho is the Saddest Lyricist?\nAre they trending towards happiness or sadness over time?"
  },
  {
    "objectID": "projects/RESPweather_dashboard/index.html",
    "href": "projects/RESPweather_dashboard/index.html",
    "title": "[Dashboard] Weather-Respiratory Disease Correlation Explorer",
    "section": "",
    "text": "Project\nThis Weather-Respiratory Diseases Correlation Explorer R Shiny Dashboard aims to investigate the relationship between climate and weather-related conditions and outbreaks of two respiratory viruses, influenza and respiratory syncytial virus (RSV).\n\nInfluenza is an RNA virus from the Orthomyxoviridae family that frequently mutates, causing seasonal epidemics, while RSV is an RNA virus from the Paramyxoviridae family that primarily affects young children and the elderly, often leading to severe lower respiratory infections. Both viruses pose significant public health challenges due to their widespread transmission and potential for severe disease.\nClimate and weather conditions can influence the activity and spread of both viruses. Studies have suggested that factors like cold temperatures, low indoor humidity, limited sunlight, and rapid weather changes may increase the risk of disease outbreaks.\n\n\nFeatures\n\nWeekly Rates: This dashboard uses CDC RESP-NET data to give an overview of influenza and rsv hospitalization rates of each state from 2018 to 2024. The user can select year, state, and pathogen of interest using the interactive filters.\n\n\n\nWeather Explorer: This dashboard integrates environmental parameter data from openmeteo API and respiratory virus-associated hospitalization rate data to perform regression analysis. The user can select year, state, weather variable and pathogen of interest using the interactive filters.\n\n\n\n\nData\n\nRespiratory Virus Related Hospitalization Rate: Disease rate data were scrapped from CDC RESP-NET.\nEnvironmental Parameters: Weather data were scrapped from Openmeteo API.\n\n\n\n\n\n\n\nPlease go to the source repository for more details.\n\n\n\n\n\nTeam\nTeam MMI are Yunyi Ru (email; GitHub) and Juanyu Zhang (email; GitHub).\n\nThis is a class project of Johns Hopkins University Biostatistics 140.777 Statistical Programming Paradigms course."
  },
  {
    "objectID": "projects/lyric_analysis/index.html#data-acquisition-wrangling",
    "href": "projects/lyric_analysis/index.html#data-acquisition-wrangling",
    "title": "[Data Analysis] Who is the saddest shoegaze band?",
    "section": "Data Acquisition & Wrangling",
    "text": "Data Acquisition & Wrangling\n\n\n  \n\nData Acquisition\nLyrics from all studio albums of the ‚Äòbig three‚Äô bands in the shoegaze genre - my bloody valentine (mbv), Ride, and slowdive - are retrieved from Genius.com using a Python package named lyricsgenius (Miller 2024) based on Genius API. Please see the author‚Äôs instructions for details.\n\n\n\n\n\n\nThe downloaded .json files were written into a .csv file for further processing. Please go to the source repository for more details.\n\n\n\n\n# load packages\nlibrary('stringi')\nlibrary('tidyverse')\nlibrary('lubridate')\nlibrary('knitr')\n\n# reference\nknitr::write_bib(\"rmarkdown\", file = \"my-refs.bib\")\n\n# import data\nlyrics &lt;- read.csv(\"data/lyrics_data.csv\")\nkable(head(lyrics, n = 1))\n\n\n\n\n\n\n\n\n\n\n\n\nTrack.Number\nSong.Title\nArtist\nRelease.Date\nLyrics\nAlbum.Name\n\n\n\n\n1\nSoft as Snow (But Warm Inside)\nmy bloody valentine\n21-Nov-88\n21 ContributorsSoft as Snow (But Warm Inside) Lyrics Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, ‚ÄúYou‚Äù Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they‚Äôre undressing me (Ooh, ooh) Come inside, it‚Äôs warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can‚Äôt see Bring me close to ecstasy High away to heaven, and I‚Äôm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you‚Äôre exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh) You might also like Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh1Embed\nIsn‚Äôt Anything\n\n\n\n\n\n\n\nData Dictionary\n\n\n\n\n\n\n\n\nField Name\nData Type\nDescription\n\n\n\n\nTrack.Number\nInteger\nThe track number of the song in the album\n\n\nSong.Title\nString\nThe title of the song\n\n\nArtist\nString\nThe artist performing the song\n\n\nRelease.Date\nString\nThe date the song was released\n\n\nLyrics\nString\nThe lyrics of the song\n\n\nAlbum.Name\nString\nThe name of the album the song belongs to\n\n\n\n\n\nData Wrangling\nThe lyrics directly retrieved from Genius.com usually have some problems -\n\n\n\n\n\n\n\n‚Äò16 ContributorsBallad of Sister Sue Lyrics‚Äô at the beginning and ‚Äò6Embed‚Äô at the end are not part of the lyrics.\n‚Äò‚àö¬¢¬¨√Ñ¬¨√¥‚Äô - some problem with Unicode encoding/decoding.\n‚ÄòSee Slowdive LiveGet tickets as low as $55‚Äô - ads is also not part of the lyrics.\n\n\n\n\nSo, it requires some data cleaning.\n\n# clean text\nlyrics_clean &lt;- lyrics %&gt;%\n  mutate(Lyrics = stri_enc_toutf8(Lyrics)) %&gt;%\n  mutate(Lyrics = str_replace_all(Lyrics, '√¢\\u0080\\u0099', \"'\")) %&gt;%\n  mutate(\n    Lyrics = Lyrics %&gt;%\n      str_remove(\".*Lyrics\") %&gt;%\n      str_remove(\"See.*tickets as low as \\\\$\\\\d+\") %&gt;%\n      str_remove('You might also like') %&gt;%\n      str_remove('\\\\d*\\\\s*Embed$') %&gt;%\n      str_trim()\n  ) %&gt;%\n  rename(Album = Album.Name) %&gt;%\n  filter(!str_detect(Lyrics, \"^\\\\s*$\")) # filter out instrumental pieces\n\n# add some factors for further processing\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  mutate(lyric.length = nchar(Lyrics),\n         Release.Date = dmy(Release.Date),\n         Release.Year = year(Release.Date))\n\nprint(lyrics_clean[1,'Lyrics'])\n\n[1] \"Soft as snow but warm inside Penetrate, you cannot hide Feeling lost forever, really need you Feeling dark and feeling true This is all I ever knew Soft as skin in leather and I whisper, \\\"You\\\" Harder you come down on me (Ooh, ooh) Sink away, you look happy (Ooh, ooh) Secrets keep forever, they're undressing me (Ooh, ooh) Come inside, it's warm in here (Ooh, ooh) Better now to have no fear (Ooh, ooh) Carried on a wave, where it can lead you? (Ooh, ooh) Touch your head, then your hair Softer, softer everywhere Fingertips are burning, can I touch you there? Soft as velvet, eyes can't see Bring me close to ecstasy High away to heaven, and I'm coming too Float now, coming down on me (Ooh, ooh) Handed you what I cannot see (Ooh, ooh) Feel the big happy, you're exploding me (Ooh, ooh) Soft as snow and warm inside (Ooh ooh) Penetrate then re-divide (Ooh, ooh) Slip away forever, really need you (Ooh, ooh)  Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh Ooh, ooh\"\n\n# this is for ride-only analysis\nlyrics_ride &lt;- lyrics_clean %&gt;%\n  filter(Artist == 'Ride')\n\n# this keeps the dataset working for the original analysis\nlyrics_clean &lt;- lyrics_clean %&gt;%\n  filter(!str_detect(Album, \"\\\\[EP\\\\]\")) %&gt;%\n  mutate(Album = factor(Album, \n                        levels = c(\"Isn‚Äôt Anything\", \"loveless\", \"m b v\", \n                                   \"Nowhere\", \"Going Blank Again\", \"Carnival of Light\", \"Tarantula\", \"Weather Diaries\", \"This Is Not a Safe Place\", \"Interplay\", \n                                   \"Just for a Day\", \"Souvlaki\", \"Pygmalion\", \"Slowdive\", \"‚Äã‚Äã‚Äãeverything is alive\")))"
  },
  {
    "objectID": "projects/all_about_birding/index.html",
    "href": "projects/all_about_birding/index.html",
    "title": "All About Birding",
    "section": "",
    "text": "Bald Eagle and Killdeer, Blackwater Natural Wildlife Reservoir, Cambridge MD, Jan ‚Äô25"
  },
  {
    "objectID": "projects/all_about_birding/index.html#baltimore-md-inner-harbor",
    "href": "projects/all_about_birding/index.html#baltimore-md-inner-harbor",
    "title": "All About Birding",
    "section": "Baltimore, MD: Inner Harbor",
    "text": "Baltimore, MD: Inner Harbor\n\n\n\n\n\nInner Harbor, Oct 2023\n\n\n\nFirst Visited: Aug 2023\nLast Visited: Dec 2024\nBirds: Canada Goose, Double-crested Cormorant, Laughing Gull, Mallard, Ring-billed Gull, Rock Pigeon\nComments: From inner harbor to harbor east, the waterfront of downtown Baltimore is a great place to watch gulls & various kinds of waterfowls.\nLink: /"
  },
  {
    "objectID": "projects/all_about_birding/index.html#cambridge-md-blackwater-national-wildlife-refuge",
    "href": "projects/all_about_birding/index.html#cambridge-md-blackwater-national-wildlife-refuge",
    "title": "All About Birding",
    "section": "Cambridge, MD: Blackwater National Wildlife Refuge",
    "text": "Cambridge, MD: Blackwater National Wildlife Refuge\n\n\n\n\n\nBlackwater National Wildlife Refuge, Jan 2025\n\n\n\nFirst Visited: Jan 2025\nLast Visited: Jan 2025\nBirds: Bald Eagle, Canada Goose, Carolina Wren, Downy Woodpecker, Great Blue Heron, Hermit Thrush, Hooded Merganser, Killdeer, Mallard, Northern Cardinal, Northern Mockingbird, Ring-billed gull, Turkey Vulture, Whistling Swan, Wilson‚Äôs Snipe\nComments: A perfect place for birding in Maryland, the most iconic bird being bald eagle. With woods, wetlands and ponds around the wildlife drive, you can see a variety of birds here. Also, the visitor center‚Äôs pick of merchandises is superb.\nLink: U.S. Fish & Wildlife Service: Blackwater National Wildlife Refuge"
  },
  {
    "objectID": "projects/all_about_birding/index.html#new-york-city-ny-liberty-island",
    "href": "projects/all_about_birding/index.html#new-york-city-ny-liberty-island",
    "title": "All About Birding",
    "section": "New York City, NY: Liberty Island",
    "text": "New York City, NY: Liberty Island\n\n\n\n\n\nLiberty Island, Jan 2024\n\n\n\nFirst Visited: Jan 2024\nLast Visited: Jan 2024\nBirds: American Herring Gull, Brant, European Starling, Ring-billed Gull\nComments: While New York City is full of fat rock pigeons, the liberty island is surprisingly a good place to watch waterfowls, and of course, gulls. Just mind your food, the gulls are really aggressive.\nLink: /"
  },
  {
    "objectID": "projects/all_about_birding/index.html#harpers-ferry-wv",
    "href": "projects/all_about_birding/index.html#harpers-ferry-wv",
    "title": "All About Birding",
    "section": "Harpers Ferry, WV",
    "text": "Harpers Ferry, WV\n\nFirst Visited: Jan 2024\nLast Visited: Jan 2024\nBirds:\nComments:\nLink: /"
  },
  {
    "objectID": "projects/all_about_birding/index.html#durham-nc-duke-university",
    "href": "projects/all_about_birding/index.html#durham-nc-duke-university",
    "title": "All About Birding",
    "section": "Durham, NC: Duke University",
    "text": "Durham, NC: Duke University\n\n\n\n\n\nDuke University, May 2022\n\n\n\nFirst Visited: Jan 2022\nLast Visited: Jan 2024\nBirds: Red-tailed Hawk, Northern Cardinal, Eastern Bluebird, Carolina Chickadee, American Robin, Carolina Wren, House Finch, Ruby-crowned Kinglet, White-breasted Nuthatch\nComments: With birdfeeders everywhere, the Sarah P. Duke Garden is a great place for backyard birds like northern cardinal and eastern bluebird. I saw a red-tailed hawk with its nest near the old chemistry building. There are also some exotic waterfowls in the ponds of Duke Garden, like È∏≥È∏Ø&Ëµ§È∫ªÈ∏≠ (not included above), but you can check the link below.\nLinks: Exotic Waterfowls in Duke Garden | Duke Gardens"
  },
  {
    "objectID": "projects/all_about_birding/index.html#seattle-wa-discovery-park",
    "href": "projects/all_about_birding/index.html#seattle-wa-discovery-park",
    "title": "All About Birding",
    "section": "Seattle, WA: Discovery Park",
    "text": "Seattle, WA: Discovery Park\n\n\n\n\n\nDiscovery Park, July 2024\n\n\n\nFirst Visited: July 2024\nLast Visited: July 2024\nBirds: Caspian Tern, Glaucous-winged gull, Great Blue Heron, American Crow\nComments: With all its natural beauty, the discovery park is a great place to enjoy the views of volcano, forests and sea at one time - and of course, gulls.\nLink: Seattle.gov: Discovery Park"
  },
  {
    "objectID": "projects/all_about_birding/index.html#cannon-beach-or-haystack-rock",
    "href": "projects/all_about_birding/index.html#cannon-beach-or-haystack-rock",
    "title": "All About Birding",
    "section": "Cannon Beach, OR: Haystack Rock",
    "text": "Cannon Beach, OR: Haystack Rock\n\n\n\n\n\nHaystack Rock, July 2024\n\n\n\nFirst Visited: July 2024\nLast Visited: July 2024\nBirds: Brown Pelican, California Gull, Tufted Puffin, Common Murre, Double-crested Cormorant, American Crow\nComments: It‚Äôs just heaven if you love shorebirds - all kinds of shorebirds are nesting on the cliff of haystack rock, just bring your binoculars since there‚Äôs a sign saying ‚Äòbirds only beyond this point‚Äô - you would not be able to get too close to that rock. The volunteer is very friendly and helpful, and tidepools are also great fun to explore. Also, if you reside in Portland, be sure to check out Powell‚Äôs books, it has a great collection of field guides as well as other gems.\nLink: Friends of Haystack Rock"
  },
  {
    "objectID": "projects/all_about_birding/index.html#new-orleans-la-maurepas-swamp",
    "href": "projects/all_about_birding/index.html#new-orleans-la-maurepas-swamp",
    "title": "All About Birding",
    "section": "New Orleans, LA: Maurepas Swamp",
    "text": "New Orleans, LA: Maurepas Swamp\n\n\n\n\n\nMaurepas Swamp - Where the Voodoo Swamp Witch Lies, Mar 2022\n\n\n\nFirst Visited: Mar 2022\nLast Visited: Mar 2022\nBirds: Great Egret\nComments: Went there as a part of swamp tour, feeding alligators and racoons with marshmallows etc.\nLink: Louisiana Dpt. of Wildlife & Fisheries: Maurepas Swamp"
  },
  {
    "objectID": "projects/all_about_birding/index.html#harpers-ferry-wv-maryland-heights",
    "href": "projects/all_about_birding/index.html#harpers-ferry-wv-maryland-heights",
    "title": "All About Birding",
    "section": "Harpers Ferry, WV: Maryland Heights",
    "text": "Harpers Ferry, WV: Maryland Heights\n\n\n\n\n\nView of Harpers Ferry from Maryland Heights, Mar 2024\n\n\n\nFirst Visited: Mar 2024\nLast Visited: Mar 2024\nBirds: Canada Goose, Mallard, Great Blue Heron, Turkey Vulture\nComments: The river in the woods is a good place to catch up with our geese and heron friends.\nLink: National Park Service: Harpers Ferry"
  },
  {
    "objectID": "projects/all_about_birding/index.html#the-next-bird-i-want-to-see-is",
    "href": "projects/all_about_birding/index.html#the-next-bird-i-want-to-see-is",
    "title": "All About Birding",
    "section": "",
    "text": "Blue Jay"
  }
]